using System;
using System.ComponentModel;
using DigitallyImported.Components;
using DigitallyImported.Configuration.Properties;

namespace DigitallyImported.Utilities
{
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T">IChannel</typeparam>
    public class ChannelView<TChannel, TTrack> : ContentView<TChannel>, IChannelView<TChannel> 
        where TChannel : class, IChannel, new()
        where TTrack : class, ITrack, new()
    {
        // private CacheManager _viewCache = CacheFactory.GetCacheManager();
        private ChannelLoader<TChannel, TTrack> _loader = null;

        /// <summary>
        /// 
        /// </summary>
        public ChannelView() // DEFAULT VIEW
            : this(new ChannelCollection<TChannel>())
        {
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="viewType"></param>
        public ChannelView(ChannelCollection<TChannel> channels) // NEED A SPECIFIC VIEW TYPE SERVED UP (WEB, WINFORMS, ETC)
            : base(channels)
        {
            ParseSortSettings();

            Settings.Default.SettingsSaving += delegate(object sender, CancelEventArgs e)
            {
                ClearItems<object>();
                ParseSortSettings();
                IsViewSet = false;
            };

            //Settings.Default.SettingChanging += delegate(object sender, System.Configuration.SettingChangingEventArgs e)
            //{
            //    Trace.WriteLine("PropertyChanged event called in ChannelView");
            //};

            //_loader = new ChannelLoader<TChannel, TTrack>();
        }

        #region IChannelView<T> Members

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="U"></typeparam>
        /// <param name="channels"></param>
        /// <param name="bypassCache"></param>
        /// <returns></returns>
        public virtual ChannelCollection<TChannel> GetView(bool bypassCache)
        {
            //if (this.PlaylistTypes == null) throw new InvalidOperationException("Attempt to set channel view with invalid PlaylistType specified. " +
            //    "Set a valid PlaylistType or use an overload of this method with PlaylistType parameter. ");
            
            // ParseSortSettings();
            return GetView(bypassCache, this.PlaylistTypes);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="bypassCache"></param>
        /// <param name="playlistTypes"></param>
        /// <returns></returns>
        public virtual ChannelCollection<TChannel> GetView(bool bypassCache, PlaylistTypes playlistTypes)
        {
            // assume view is set
            IsViewSet = true;

            _channels = GetItem(_channels);

            if ((bypassCache) || (_channels == null))
            {
                _loader = new ChannelLoader<TChannel, TTrack>(Settings.Default.DIPlaylistXml);  // this should not be hardcoded
                //_channels = ChannelLoaderService<TChannel>.LoadChannels(bypassCache);  
                _channels = _loader.LoadChannels(bypassCache);

                //if (!IsViewSet)
                //{
                // ParseSortSettings();
                IsViewSet = false;
                //}

                // assign siteIcons
                _channels.ForEach(delegate(TChannel t)
                {
                    if (t.SiteName.Contains(Resources.Properties.Resources.DIHomePage))
                    {
                        t.PlaylistType = PlaylistTypes.DI;
                        t.SiteIcon = Resources.Properties.Resources.DIIconNew;
                    }
                    else if (t.SiteName.Contains(Resources.Properties.Resources.SkyHomePage))
                    {
                        t.PlaylistType = PlaylistTypes.Sky;
                        t.SiteIcon = Resources.Properties.Resources.SkyIcon;
                    }
                    else
                    {
                        t.PlaylistType = PlaylistTypes.External;
                        // t.SiteIcon = Resources.Properties.Resources.
                    }
                });

                // now remove channels that aren't favorites specified in settings
                if (playlistTypes == PlaylistTypes.Custom)
                {
                    _channels.RemoveAll(delegate(TChannel t)
                    {
                        // if (Settings.Default.PlaylistFavorites != null)
                        return !Settings.Default.PlaylistFavorites.Contains(t.ChannelName);
                    });
                }
                else
                {
                    _channels.RemoveAll(delegate(TChannel t)
                    {
                        return (t.PlaylistType & playlistTypes) == 0;
                    });
                }

                Sort(_channels);
                _channels.ForEach(delegate(TChannel t)
                {
                    t.IsAlternating = (_channels.IndexOf(t) % 2 == 0);
                });

                InsertItem(_channels);

                // only fire the event if the view changed, cache was bypassed on purpose
                // OnChannelViewChanged(this, new ChannelViewChangedEventArgs<ChannelCollection<IChannel>>(_channels as ChannelCollection<IChannel>));
            }

            return _channels;
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Save()
        {
            Settings.Default.PlaylistTypes.Clear();
            Settings.Default.PlaylistTypes.Add(PlaylistTypes.ToString());
            Settings.Default.ChannelSortBy = SortBy.ToString();
            Settings.Default.ChannelSortOrder = SortOrder.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="action">Summary for action</param>
        /// <returns></returns>
        public virtual ChannelCollection<TChannel> GetView(System.Predicate<TChannel> action)
        {
            // foreach (T t in 
            return null;
        }

        /// <summary>
        /// 
        /// </summary>
        public virtual ChannelCollection<TChannel> Channels
        {
            get 
            {
                Sort(_channels);    // sort first???
                return this._channels; 
            }
        }
        private ChannelCollection<TChannel> _channels;

        #endregion

        public override PlaylistTypes PlaylistTypes
        {
            get
            {
                return base.PlaylistTypes;
            }
            set
            {
                IsViewSet = false;
                base.PlaylistTypes = value;
                Settings.Default.PlaylistTypes.Clear();
                Settings.Default.PlaylistTypes.Add(value.ToString());
                // Save();   // HACK!
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public virtual TChannel SelectedChannel
        {
            get { return _selectedChannel; }
            set 
            { 
                _selectedChannel = value;
                ((TChannel)_selectedChannel).IsSelected = true;
            }
        }
        private TChannel _selectedChannel;


        // load up defaults
        private void ParseSortSettings()
        {
            SortOrder       = Utilities.ParseEnum<SortOrder>(Settings.Default.ChannelSortOrder.ToString());
            SortBy          = Utilities.ParseEnum<SortBy>(Settings.Default.ChannelSortBy.ToString());
            PlaylistTypes   = Utilities.GetPlaylistTypes<PlaylistTypes>(Settings.Default.PlaylistTypes);
        }


        /// <summary>
        /// 
        /// </summary>
        public virtual event EventHandler<ChannelViewChangedEventArgs<ChannelCollection<IChannel>>> ChannelViewChanged
        {
            add
            {
                lock (_viewChangedLock)
                {
                    _channelViewChanged += value;
                }
            }
            remove
            {
                lock (_viewChangedLock)
                {
                    _channelViewChanged -= value;
                }
            }
        }
        private EventHandler<ChannelViewChangedEventArgs<ChannelCollection<IChannel>>> _channelViewChanged;
        private readonly object _viewChangedLock = new object();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected virtual void OnChannelViewChanged(object sender, ChannelViewChangedEventArgs<ChannelCollection<IChannel>> e)
        {
            if (this._channelViewChanged != null)
                _channelViewChanged(sender, e);
        }
    }
}
