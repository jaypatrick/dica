//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[System.Xml.Serialization.XmlRootAttribute("CalendarData")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class EventData : System.Data.DataSet {
    
    private _DI_EVENTSDataTable table_DI_EVENTS;
    
    private EVENTDataTable tableEVENT;
    
    private System.Data.DataRelation _relationDI_EVENTS_EVENT;
    
    private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public EventData() {
        this.BeginInit();
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();

        // GC.ReRegisterForFinalize(this);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected EventData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["DI-EVENTS"] != null)) {
                base.Tables.Add(new _DI_EVENTSDataTable(ds.Tables["DI-EVENTS"]));
            }
            if ((ds.Tables["EVENT"] != null)) {
                base.Tables.Add(new EVENTDataTable(ds.Tables["EVENT"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public _DI_EVENTSDataTable _DI_EVENTS {
        get {
            return this.table_DI_EVENTS;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public EVENTDataTable EVENT {
        get {
            return this.tableEVENT;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.BrowsableAttribute(true)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override System.Data.DataSet Clone() {
        EventData cln = ((EventData)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DI-EVENTS"] != null)) {
                base.Tables.Add(new _DI_EVENTSDataTable(ds.Tables["DI-EVENTS"]));
            }
            if ((ds.Tables["EVENT"] != null)) {
                base.Tables.Add(new EVENTDataTable(ds.Tables["EVENT"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.table_DI_EVENTS = ((_DI_EVENTSDataTable)(base.Tables["DI-EVENTS"]));
        if ((initTable == true)) {
            if ((this.table_DI_EVENTS != null)) {
                this.table_DI_EVENTS.InitVars();
            }
        }
        this.tableEVENT = ((EVENTDataTable)(base.Tables["EVENT"]));
        if ((initTable == true)) {
            if ((this.tableEVENT != null)) {
                this.tableEVENT.InitVars();
            }
        }
        this._relationDI_EVENTS_EVENT = this.Relations["DI-EVENTS_EVENT"];
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "EventData";
        this.Prefix = "";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        this.table_DI_EVENTS = new _DI_EVENTSDataTable();
        base.Tables.Add(this.table_DI_EVENTS);
        this.tableEVENT = new EVENTDataTable();
        base.Tables.Add(this.tableEVENT);
        System.Data.ForeignKeyConstraint fkc;
        fkc = new System.Data.ForeignKeyConstraint("DI-EVENTS_EVENT", new System.Data.DataColumn[] {
                    this.table_DI_EVENTS._DI_EVENTS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableEVENT._DI_EVENTS_IdColumn});
        this.tableEVENT.Constraints.Add(fkc);
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = System.Data.Rule.Cascade;
        fkc.UpdateRule = System.Data.Rule.Cascade;
        this._relationDI_EVENTS_EVENT = new System.Data.DataRelation("DI-EVENTS_EVENT", new System.Data.DataColumn[] {
                    this.table_DI_EVENTS._DI_EVENTS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableEVENT._DI_EVENTS_IdColumn}, false);
        this._relationDI_EVENTS_EVENT.Nested = true;
        this.Relations.Add(this._relationDI_EVENTS_EVENT);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerialize_DI_EVENTS() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeEVENT() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
        EventData ds = new EventData();
        System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
        System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
        xs.Add(ds.GetSchemaSerializable());
        System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        return type;
    }
    
    public delegate void _DI_EVENTSRowChangeEventHandler(object sender, _DI_EVENTSRowChangeEvent e);
    
    public delegate void EVENTRowChangeEventHandler(object sender, EVENTRowChangeEvent e);
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class _DI_EVENTSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
        
        private System.Data.DataColumn column_GENERATE_TIME;
        
        private System.Data.DataColumn column_DI_EVENTS_Id;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSDataTable() {
            this.TableName = "DI-EVENTS";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal _DI_EVENTSDataTable(System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected _DI_EVENTSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _GENERATE_TIMEColumn {
            get {
                return this.column_GENERATE_TIME;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _DI_EVENTS_IdColumn {
            get {
                return this.column_DI_EVENTS_Id;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSRow this[int index] {
            get {
                return ((_DI_EVENTSRow)(this.Rows[index]));
            }
        }
        
        public event _DI_EVENTSRowChangeEventHandler _DI_EVENTSRowChanging;
        
        public event _DI_EVENTSRowChangeEventHandler _DI_EVENTSRowChanged;
        
        public event _DI_EVENTSRowChangeEventHandler _DI_EVENTSRowDeleting;
        
        public event _DI_EVENTSRowChangeEventHandler _DI_EVENTSRowDeleted;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Add_DI_EVENTSRow(_DI_EVENTSRow row) {
            this.Rows.Add(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSRow Add_DI_EVENTSRow(string _GENERATE_TIME) {
            _DI_EVENTSRow row_DI_EVENTSRow = ((_DI_EVENTSRow)(this.NewRow()));
            row_DI_EVENTSRow.ItemArray = new object[] {
                    _GENERATE_TIME,
                    null};
            this.Rows.Add(row_DI_EVENTSRow);
            return row_DI_EVENTSRow;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataTable Clone() {
            _DI_EVENTSDataTable cln = ((_DI_EVENTSDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataTable CreateInstance() {
            return new _DI_EVENTSDataTable();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.column_GENERATE_TIME = base.Columns["GENERATE-TIME"];
            this.column_DI_EVENTS_Id = base.Columns["DI-EVENTS_Id"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.column_GENERATE_TIME = new System.Data.DataColumn("GENERATE-TIME", typeof(string), null, System.Data.MappingType.Element);
            this.column_GENERATE_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_GENERATE_TIME");
            this.column_GENERATE_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_GENERATE_TIMEColumn");
            this.column_GENERATE_TIME.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_GENERATE_TIME");
            this.column_GENERATE_TIME.ExtendedProperties.Add("Generator_UserColumnName", "GENERATE-TIME");
            base.Columns.Add(this.column_GENERATE_TIME);
            this.column_DI_EVENTS_Id = new System.Data.DataColumn("DI-EVENTS_Id", typeof(int), null, System.Data.MappingType.Hidden);
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_DI_EVENTS_Id");
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_DI_EVENTS_IdColumn");
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_DI_EVENTS_Id");
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_UserColumnName", "DI-EVENTS_Id");
            base.Columns.Add(this.column_DI_EVENTS_Id);
            this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.column_DI_EVENTS_Id}, true));
            this.column_DI_EVENTS_Id.AutoIncrement = true;
            this.column_DI_EVENTS_Id.AllowDBNull = false;
            this.column_DI_EVENTS_Id.Unique = true;
            this.ExtendedProperties.Add("Generator_RowClassName", "_DI_EVENTSRow");
            this.ExtendedProperties.Add("Generator_RowEvArgName", "_DI_EVENTSRowChangeEvent");
            this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_DI_EVENTSRowChangeEventHandler");
            this.ExtendedProperties.Add("Generator_TableClassName", "_DI_EVENTSDataTable");
            this.ExtendedProperties.Add("Generator_TablePropName", "_DI_EVENTS");
            this.ExtendedProperties.Add("Generator_TableVarName", "table_DI_EVENTS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSRow New_DI_EVENTSRow() {
            return ((_DI_EVENTSRow)(this.NewRow()));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
            return new _DI_EVENTSRow(builder);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Type GetRowType() {
            return typeof(_DI_EVENTSRow);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this._DI_EVENTSRowChanged != null)) {
                this._DI_EVENTSRowChanged(this, new _DI_EVENTSRowChangeEvent(((_DI_EVENTSRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this._DI_EVENTSRowChanging != null)) {
                this._DI_EVENTSRowChanging(this, new _DI_EVENTSRowChangeEvent(((_DI_EVENTSRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this._DI_EVENTSRowDeleted != null)) {
                this._DI_EVENTSRowDeleted(this, new _DI_EVENTSRowChangeEvent(((_DI_EVENTSRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this._DI_EVENTSRowDeleting != null)) {
                this._DI_EVENTSRowDeleting(this, new _DI_EVENTSRowChangeEvent(((_DI_EVENTSRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Remove_DI_EVENTSRow(_DI_EVENTSRow row) {
            this.Rows.Remove(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            EventData ds = new EventData();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "_DI_EVENTSDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            return type;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class EVENTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
        
        private System.Data.DataColumn columnDATE;
        
        private System.Data.DataColumn columnDAY;
        
        private System.Data.DataColumn columnTITLE;
        
        private System.Data.DataColumn column_TITLE_SECONDARY;
        
        private System.Data.DataColumn column_GMT_TIME;
        
        private System.Data.DataColumn column_START_TIME;
        
        private System.Data.DataColumn column_END_TIME;
        
        private System.Data.DataColumn columnWHERE;
        
        private System.Data.DataColumn columnCALENDAR_URL;
        
        private System.Data.DataColumn column_DI_EVENTS_Id;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTDataTable() {
            this.TableName = "EVENT";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal EVENTDataTable(System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EVENTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn DATEColumn {
            get {
                return this.columnDATE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn DAYColumn {
            get {
                return this.columnDAY;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn TITLEColumn {
            get {
                return this.columnTITLE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _TITLE_SECONDARYColumn {
            get {
                return this.column_TITLE_SECONDARY;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _GMT_TIMEColumn {
            get {
                return this.column_GMT_TIME;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _START_TIMEColumn {
            get {
                return this.column_START_TIME;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _END_TIMEColumn {
            get {
                return this.column_END_TIME;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn WHEREColumn {
            get {
                return this.columnWHERE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn CALENDAR_URLColumn {
            get {
                return this.columnCALENDAR_URL;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn _DI_EVENTS_IdColumn {
            get {
                return this.column_DI_EVENTS_Id;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTRow this[int index] {
            get {
                return ((EVENTRow)(this.Rows[index]));
            }
        }
        
        public event EVENTRowChangeEventHandler EVENTRowChanging;
        
        public event EVENTRowChangeEventHandler EVENTRowChanged;
        
        public event EVENTRowChangeEventHandler EVENTRowDeleting;
        
        public event EVENTRowChangeEventHandler EVENTRowDeleted;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddEVENTRow(EVENTRow row) {
            this.Rows.Add(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTRow AddEVENTRow(string DATE, string DAY, string TITLE, string _TITLE_SECONDARY, string _GMT_TIME, string _START_TIME, string _END_TIME, string WHERE, string CALENDAR_URL, _DI_EVENTSRow _parent_DI_EVENTSRowByDI_EVENTS_EVENT) {
            EVENTRow rowEVENTRow = ((EVENTRow)(this.NewRow()));
            rowEVENTRow.ItemArray = new object[] {
                    DATE,
                    DAY,
                    TITLE,
                    _TITLE_SECONDARY,
                    _GMT_TIME,
                    _START_TIME,
                    _END_TIME,
                    WHERE,
                    CALENDAR_URL,
                    _parent_DI_EVENTSRowByDI_EVENTS_EVENT[1]};
            this.Rows.Add(rowEVENTRow);
            return rowEVENTRow;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataTable Clone() {
            EVENTDataTable cln = ((EVENTDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataTable CreateInstance() {
            return new EVENTDataTable();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnDATE = base.Columns["DATE"];
            this.columnDAY = base.Columns["DAY"];
            this.columnTITLE = base.Columns["TITLE"];
            this.column_TITLE_SECONDARY = base.Columns["TITLE-SECONDARY"];
            this.column_GMT_TIME = base.Columns["GMT-TIME"];
            this.column_START_TIME = base.Columns["START-TIME"];
            this.column_END_TIME = base.Columns["END-TIME"];
            this.columnWHERE = base.Columns["WHERE"];
            this.columnCALENDAR_URL = base.Columns["CALENDAR_URL"];
            this.column_DI_EVENTS_Id = base.Columns["DI-EVENTS_Id"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnDATE = new System.Data.DataColumn("DATE", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnDATE);
            this.columnDAY = new System.Data.DataColumn("DAY", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnDAY);
            this.columnTITLE = new System.Data.DataColumn("TITLE", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnTITLE);
            this.column_TITLE_SECONDARY = new System.Data.DataColumn("TITLE-SECONDARY", typeof(string), null, System.Data.MappingType.Element);
            this.column_TITLE_SECONDARY.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_TITLE_SECONDARY");
            this.column_TITLE_SECONDARY.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_TITLE_SECONDARYColumn");
            this.column_TITLE_SECONDARY.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_TITLE_SECONDARY");
            this.column_TITLE_SECONDARY.ExtendedProperties.Add("Generator_UserColumnName", "TITLE-SECONDARY");
            base.Columns.Add(this.column_TITLE_SECONDARY);
            this.column_GMT_TIME = new System.Data.DataColumn("GMT-TIME", typeof(string), null, System.Data.MappingType.Element);
            this.column_GMT_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_GMT_TIME");
            this.column_GMT_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_GMT_TIMEColumn");
            this.column_GMT_TIME.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_GMT_TIME");
            this.column_GMT_TIME.ExtendedProperties.Add("Generator_UserColumnName", "GMT-TIME");
            base.Columns.Add(this.column_GMT_TIME);
            this.column_START_TIME = new System.Data.DataColumn("START-TIME", typeof(string), null, System.Data.MappingType.Element);
            this.column_START_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_START_TIME");
            this.column_START_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_START_TIMEColumn");
            this.column_START_TIME.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_START_TIME");
            this.column_START_TIME.ExtendedProperties.Add("Generator_UserColumnName", "START-TIME");
            base.Columns.Add(this.column_START_TIME);
            this.column_END_TIME = new System.Data.DataColumn("END-TIME", typeof(string), null, System.Data.MappingType.Element);
            this.column_END_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_END_TIME");
            this.column_END_TIME.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_END_TIMEColumn");
            this.column_END_TIME.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_END_TIME");
            this.column_END_TIME.ExtendedProperties.Add("Generator_UserColumnName", "END-TIME");
            base.Columns.Add(this.column_END_TIME);
            this.columnWHERE = new System.Data.DataColumn("WHERE", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnWHERE);
            this.columnCALENDAR_URL = new System.Data.DataColumn("CALENDAR_URL", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnCALENDAR_URL);
            this.column_DI_EVENTS_Id = new System.Data.DataColumn("DI-EVENTS_Id", typeof(int), null, System.Data.MappingType.Hidden);
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_DI_EVENTS_Id");
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_DI_EVENTS_IdColumn");
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_DI_EVENTS_Id");
            this.column_DI_EVENTS_Id.ExtendedProperties.Add("Generator_UserColumnName", "DI-EVENTS_Id");
            base.Columns.Add(this.column_DI_EVENTS_Id);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTRow NewEVENTRow() {
            return ((EVENTRow)(this.NewRow()));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
            return new EVENTRow(builder);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Type GetRowType() {
            return typeof(EVENTRow);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.EVENTRowChanged != null)) {
                this.EVENTRowChanged(this, new EVENTRowChangeEvent(((EVENTRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.EVENTRowChanging != null)) {
                this.EVENTRowChanging(this, new EVENTRowChangeEvent(((EVENTRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.EVENTRowDeleted != null)) {
                this.EVENTRowDeleted(this, new EVENTRowChangeEvent(((EVENTRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.EVENTRowDeleting != null)) {
                this.EVENTRowDeleting(this, new EVENTRowChangeEvent(((EVENTRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveEVENTRow(EVENTRow row) {
            this.Rows.Remove(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            EventData ds = new EventData();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "EVENTDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            return type;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class _DI_EVENTSRow : System.Data.DataRow {
        
        private _DI_EVENTSDataTable table_DI_EVENTS;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal _DI_EVENTSRow(System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.table_DI_EVENTS = ((_DI_EVENTSDataTable)(this.Table));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _GENERATE_TIME {
            get {
                try {
                    return ((string)(this[this.table_DI_EVENTS._GENERATE_TIMEColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'GENERATE-TIME\' in table \'DI-EVENTS\' is DBNull.", e);
                }
            }
            set {
                this[this.table_DI_EVENTS._GENERATE_TIMEColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int _DI_EVENTS_Id {
            get {
                return ((int)(this[this.table_DI_EVENTS._DI_EVENTS_IdColumn]));
            }
            set {
                this[this.table_DI_EVENTS._DI_EVENTS_IdColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_GENERATE_TIMENull() {
            return this.IsNull(this.table_DI_EVENTS._GENERATE_TIMEColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_GENERATE_TIMENull() {
            this[this.table_DI_EVENTS._GENERATE_TIMEColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTRow[] GetEVENTRows() {
            return ((EVENTRow[])(base.GetChildRows(this.Table.ChildRelations["DI-EVENTS_EVENT"])));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class EVENTRow : System.Data.DataRow {
        
        private EVENTDataTable tableEVENT;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal EVENTRow(System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableEVENT = ((EVENTDataTable)(this.Table));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DATE {
            get {
                try {
                    return ((string)(this[this.tableEVENT.DATEColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'DATE\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT.DATEColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DAY {
            get {
                try {
                    return ((string)(this[this.tableEVENT.DAYColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'DAY\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT.DAYColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TITLE {
            get {
                try {
                    return ((string)(this[this.tableEVENT.TITLEColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'TITLE\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT.TITLEColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _TITLE_SECONDARY {
            get {
                try {
                    return ((string)(this[this.tableEVENT._TITLE_SECONDARYColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'TITLE-SECONDARY\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT._TITLE_SECONDARYColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _GMT_TIME {
            get {
                try {
                    return ((string)(this[this.tableEVENT._GMT_TIMEColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'GMT-TIME\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT._GMT_TIMEColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _START_TIME {
            get {
                try {
                    return ((string)(this[this.tableEVENT._START_TIMEColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'START-TIME\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT._START_TIMEColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _END_TIME {
            get {
                try {
                    return ((string)(this[this.tableEVENT._END_TIMEColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'END-TIME\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT._END_TIMEColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string WHERE {
            get {
                try {
                    return ((string)(this[this.tableEVENT.WHEREColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'WHERE\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT.WHEREColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CALENDAR_URL {
            get {
                try {
                    return ((string)(this[this.tableEVENT.CALENDAR_URLColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'CALENDAR_URL\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT.CALENDAR_URLColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int _DI_EVENTS_Id {
            get {
                try {
                    return ((int)(this[this.tableEVENT._DI_EVENTS_IdColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'DI-EVENTS_Id\' in table \'EVENT\' is DBNull.", e);
                }
            }
            set {
                this[this.tableEVENT._DI_EVENTS_IdColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSRow _DI_EVENTSRow {
            get {
                return ((_DI_EVENTSRow)(this.GetParentRow(this.Table.ParentRelations["DI-EVENTS_EVENT"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["DI-EVENTS_EVENT"]);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDATENull() {
            return this.IsNull(this.tableEVENT.DATEColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDATENull() {
            this[this.tableEVENT.DATEColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDAYNull() {
            return this.IsNull(this.tableEVENT.DAYColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDAYNull() {
            this[this.tableEVENT.DAYColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTITLENull() {
            return this.IsNull(this.tableEVENT.TITLEColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTITLENull() {
            this[this.tableEVENT.TITLEColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_TITLE_SECONDARYNull() {
            return this.IsNull(this.tableEVENT._TITLE_SECONDARYColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_TITLE_SECONDARYNull() {
            this[this.tableEVENT._TITLE_SECONDARYColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_GMT_TIMENull() {
            return this.IsNull(this.tableEVENT._GMT_TIMEColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_GMT_TIMENull() {
            this[this.tableEVENT._GMT_TIMEColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_START_TIMENull() {
            return this.IsNull(this.tableEVENT._START_TIMEColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_START_TIMENull() {
            this[this.tableEVENT._START_TIMEColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_END_TIMENull() {
            return this.IsNull(this.tableEVENT._END_TIMEColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_END_TIMENull() {
            this[this.tableEVENT._END_TIMEColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsWHERENull() {
            return this.IsNull(this.tableEVENT.WHEREColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetWHERENull() {
            this[this.tableEVENT.WHEREColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCALENDAR_URLNull() {
            return this.IsNull(this.tableEVENT.CALENDAR_URLColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCALENDAR_URLNull() {
            this[this.tableEVENT.CALENDAR_URLColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_DI_EVENTS_IdNull() {
            return this.IsNull(this.tableEVENT._DI_EVENTS_IdColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_DI_EVENTS_IdNull() {
            this[this.tableEVENT._DI_EVENTS_IdColumn] = System.Convert.DBNull;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class _DI_EVENTSRowChangeEvent : System.EventArgs {
        
        private _DI_EVENTSRow eventRow;
        
        private System.Data.DataRowAction eventAction;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSRowChangeEvent(_DI_EVENTSRow row, System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _DI_EVENTSRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class EVENTRowChangeEvent : System.EventArgs {
        
        private EVENTRow eventRow;
        
        private System.Data.DataRowAction eventAction;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTRowChangeEvent(EVENTRow row, System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EVENTRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
