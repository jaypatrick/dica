using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net.NetworkInformation;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms;
// DI
using DigitallyImported.Components;
using DigitallyImported.Configuration.Properties;
using DigitallyImported.Utilities;
using DigitallyImported.Player;
using P = DigitallyImported.Resources.Properties;

// using DigitallyImported.Client.PlaylistService;

namespace DigitallyImported.Client.Controls
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ContentControl<TChannel, TTrack> : UserControl
        where TChannel : UserControl, IChannel, new()
        where TTrack : UserControl, ITrack, new()
    {
        // value types
        private bool _isFirstRun = true;
        private string _eventsUrl = string.Format(P.Resources.DICalendarPage, string.Format(P.Resources.UrlContainer, P.Resources.DIHomePage), "calendar");

        HistoryForm _trackHistory;

        // reference types
        private TChannel _channel = default(TChannel);

        // views
        private ChannelView<TChannel, TTrack> _channelView;
        private EventView<Event> _eventView;

        // players
        PlayerLoader _playerLoader;


        RefreshCounter RefreshCounter = new RefreshCounter();
        private string serviceOfflineMessage = "DI.fm playlist service is currently offline.";

        /// <summary>
        /// 
        /// </summary>
        public ContentControl()
        {
            InitializeComponent();
        }

        protected override void OnPaint(PaintEventArgs e)
        {

        }

        private void ContentControl_Load(object sender, EventArgs e)
        {
            _channelView = new ChannelView<TChannel, TTrack>();
            _eventView = new EventView<Event>();

            // check network status
            UpdateNetworkStatus(NetworkInterface.GetIsNetworkAvailable());

            BindEvents();

            // local properties
            RefreshPlaylistButton.Image     = P.Resources.icon_repeat;
            ViewEventsSplitButton.Image     = P.Resources.icon_calendar;
            ViewPlaylistsSplitButton.Image  = P.Resources.icon_web;
            SortPlaylistSplitButton.Image   = P.Resources.icon_sort;
            PlayerTypeSplitButton.Image     = P.Resources.icon_sound.ToBitmap();
            OptionsButton.Image             = P.Resources.icon_options;
            ExceptionStatusMessage.Image    = P.Resources.icon_warning;

            MainNotifyIcon.Icon             = P.Resources.DIIconOld; // SWITCH DYNAMICALLY BASED ON CHANNEL LISTENING TO
            MainNotifyIcon.ContextMenuStrip = ChannelsContextMenu;
            MainNotifyIcon.Text             = P.Resources.ApplicationTitle;
            RefreshCounterLabel.Text        = P.Resources.PlaylistRefreshText;

            RefreshCounter.Stop();

            ViewPlaylistsSplitButton.DropDown   = PlaylistsContextMenu;
            SortPlaylistSplitButton.DropDown    = SortContextMenu;
            PlayerTypeSplitButton.DropDown      = PlayersContextMenu;
            PlayerTypeSplitButton.Text          = DigitallyImported.Components.Utilities.SplitName(Settings.Default.PlayerType);
            FeedbackButton.ToolTipText          = P.Resources.SupportPageUrl;


            // memory counter
            //System.Windows.Forms.Timer t = new System.Windows.Forms.Timer();
            //t.Interval = 1000;
            //t.Start();
            //t.Tick += (s, ea) =>
            //{
            //    MemoryStatus.Text = string.Format("{0} {1}", ((long)Process.GetCurrentProcess(). / 1024).ToString(), "KB");
            //};
            // end
        }

        /// <summary>
        /// 
        /// </summary>
        protected virtual void BindEvents()
        {
            // BIND GLOBAL EVENTS
            Channel.ChannelChanged          += new EventHandler<ChannelChangedEventArgs<IChannel>>(ChannelChanged);
            RefreshCounter.CounterRefreshed += new EventHandler<EventArgs>(RefreshPlaylist);

            Settings.Default.SettingsSaving += (sender, e) =>
            {
                if (this.Parent != null && !e.Cancel)
                    RefreshPlaylist(sender, e);
            };

            NetworkChange.NetworkAvailabilityChanged += (sender, e) =>
            {
                this.BeginInvoke(new System.Threading.WaitCallback(UpdateNetworkStatus), e.IsAvailable);
            };

            ParentForm.FormClosing += (sender, e) =>
            {
                if (!e.Cancel)
                    _channelView.Save();
            };
            ParentForm.Resize += (sender, e) =>
            {
                if (!_isFirstRun)
                    UpdateVisualCues();
            };

            MainNotifyIcon.MouseDoubleClick += (sender, e) =>
            {
                if (e.Button == MouseButtons.Left)
                    ParentForm.WindowState = FormWindowState.Normal;
            };

            // player isn't installed?
            PlayerLoader.PlayerNotInstalledException += (sender,  e) =>
            {
                MessageBox.Show(e.Exception.Message);
            };

            // testing custom border
            PlaylistPanel.Paint += (s, pea) =>
            {
                // ControlPaint.DrawBorder(pea.Graphics, pea.ClipRectangle, Color.Gray, ButtonBorderStyle.Solid);
            };
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        protected virtual void UpdateNetworkStatus(object state)
        {
            if ((bool)state)
            {
                ConnectionStatusLabel.Text = P.Resources.NetworkOnline;
                ConnectionStatusLabel.ToolTipText = P.Resources.NetworkAvailable;
                ConnectionStatusLabel.Image = Resources.Properties.Resources.icon_connected.ToBitmap();
                this.Enabled = true;
            }
            else
            {
                ConnectionStatusLabel.Text = P.Resources.NetworkOffline;
                ConnectionStatusLabel.ToolTipText = P.Resources.NetworkUnavailable;
                ConnectionStatusLabel.Image = Resources.Properties.Resources.icon_disconnected.ToBitmap();
                this.Enabled = false; // DON"T DISABLE THE ENTIRE F'ING THING...and do this from the base form class.
            }
        }

        private void ChannelChanged(object sender, ChannelChangedEventArgs<IChannel> e)
        {
            SetTrackText(e.RefreshedContent.CurrentTrack);

            foreach (Control control in this.PlaylistPanel.Controls)
            {
                if (control is TChannel)
                {
                    if (control.Equals(e.RefreshedContent))
                    {
                        _channel = e.RefreshedContent as TChannel;
                        UpdateVisualCues();
                    }
                    else
                    {
                        ((TChannel)control).IsSelected = false;
                    }
                }
            }
        }

        private void RefreshPlaylist(object sender, EventArgs e)
        {
            
            RefreshPlaylistButton.Enabled   = false;
            PlaylistRefreshProgress.Visible = true;
            PlaylistRefreshProgress.Enabled = false;
            ExceptionStatusMessage.Visible  = false;
            this.PlaylistPanel.Enabled      = false;

            if (NetworkInterface.GetIsNetworkAvailable()) // disables checking if no network connection
            {
                try
                {    
                    if (!RefreshPlaylistWorker.IsBusy)
                        RefreshPlaylistWorker.RunWorkerAsync();

                    if (!RefreshEventlistWorker.IsBusy)
                        RefreshEventlistWorker.RunWorkerAsync(); // OFFLOAD ELSEWHERE
                }
                catch (Exception exc)
                {
                    RefreshPlaylistButton.Enabled      = true;
                    PlaylistRefreshProgress.Visible    = false;
                    ExceptionStatusMessage.Visible     = true;
                    ExceptionStatusMessage.ToolTipText = exc.ToString();
                    Trace.WriteLine(exc.ToString());
                }
                finally
                {
                    // RefreshPlaylistButton.Enabled = true;
                }
            }
        }

        private ChannelCollection<TChannel> RefreshPlaylistAsync(BackgroundWorker worker, DoWorkEventArgs e)
        {
            ChannelCollection<TChannel> channels = null;

            int percentageComplete = 0;

            worker.ReportProgress(0);
            worker.ReportProgress(50);

            worker.ReportProgress(100);

            try
            {
                channels = _channelView.GetView(false); // need an int out param for progress bar
            }
            catch (System.Xml.XmlException)
            {
                DISiteUnavailable();
            }

            return channels;
        }

        private EventCollection<Event> RefreshEventlistAsync(BackgroundWorker worker, DoWorkEventArgs e)
        {
            EventCollection<Event> events = null;

            worker.ReportProgress(0);
            try
            {
                events = _eventView.GetView(false);
            }
            catch (System.Xml.XmlException)
            {
                DISiteUnavailable();
            }

            return events;
        }

        private void RefreshPlaylistWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker bw = sender as BackgroundWorker;
            e.Result = RefreshPlaylistAsync(bw, e);
        }

        private void RefreshEventlistWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker bw = sender as BackgroundWorker;
            e.Result = RefreshEventlistAsync(bw, e);
        }

        private void RefreshPlaylistWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            PlaylistRefreshProgress.Value = e.ProgressPercentage;
        }

        private void RefreshEventlistWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // TODO, implement
        }

        private void RefreshPlaylistWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            ChannelCollection<TChannel> channels = e.Result as ChannelCollection<TChannel>;

            if (e != null)
            {
                PlaylistPanel.Channels = channels.Count > 0 ? channels : _channelView.GetView(false);
                ChannelsContextMenu.Channels = PlaylistPanel.Channels;
                ViewChannelSplitButton.DropDown = ChannelsContextMenu;

                BindChannelPlaylistPanel();

                // PlaylistPanel.RefreshPlaylist(sender, e);

                if (_isFirstRun)
                {
                    // IF NULL, GENERATE RANDOM NUMBER AND PLAY THAT CHANNEL INDEX
                    _channel = channels[Settings.Default.SelectedChannelName] ?? channels[new Random().Next(channels.Count > 0 ? channels.Count : 0)];

                    _playerLoader = new PlayerLoader(_channel);
                    _isFirstRun = false;

                    RefreshCounter.CounterTick += delegate(object s, EventArgs ea)
                    {
                        RefreshCounterLabel.Text = string.Format("{0} {1}", "Refreshing in", RefreshCounter.Value);
                    };

                    RefreshCounter.Start();
                }

                UpdateVisualCues();

                // fucking around w/ opacity
                ParentForm.Opacity = Settings.Default.FormOpacityValue;
            }
        }

        private void RefreshEventlistWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            EventsContextMenu.Events = (EventCollection<Event>)e.Result;
            ViewEventsSplitButton.DropDown = EventsContextMenu;

            ViewEventsSplitButton.Enabled = true;
            ViewEventsSplitButton.ToolTipText = _eventsUrl;
        }

        private void AboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutForm about = new AboutForm();
            about.Show(this);
        }

        private void OptionsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AdminForm admin = new AdminForm();
            DialogResult result = admin.ShowDialog();
        }

        private void ViewChannelSplitButton_ButtonClick(object sender, EventArgs e)
        {
            Parallel.Invoke(() =>
                {
                    DigitallyImported.Components.Utilities.StartProcess(_channel.ChannelInfoUrl.AbsoluteUri);
                });
        }

        private void ViewSitesSplitButton_ButtonClick(object sender, EventArgs e)
        {
            if (ViewPlaylistsSplitButton.Tag != null)
            {
                Parallel.Invoke(() =>
                    {
                        DigitallyImported.Components.Utilities.StartProcess(((Uri)ViewPlaylistsSplitButton.Tag).AbsoluteUri);
                    });
            }
        }

        private void ViewChannel_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            _channel = ChannelsContextMenu.Channels[e.ClickedItem.Text.Replace(" ", "").ToLower().Trim()];
            // _channel.IsSelected = true;

            // TESTING
            foreach (Control control in this.PlaylistPanel.Controls)
            {
                if (control is TChannel)
                {
                    TChannel c = (TChannel)control;

                    if (c.Equals(_channel))
                    {
                        // PlayerLoader.Load(_channel); THIS WILL PLAY THE SELECTED CHANNEL AUTOMATICALLY
                        _channel.IsSelected = true;
                    }
                    else
                    {
                        c.IsSelected = false;
                    }
                }
            }
            ViewChannelSplitButton.Text = _channel.ChannelName;
            // ViewChannelSplitButton.ToolTipText = _channel.ChannelInfoUrl.AbsoluteUri;
            ViewChannelSplitButton.Image = _channel.SiteIcon.ToBitmap();
        }

        private void ViewChannelSplitButton_TextChanged(object sender, EventArgs e)
        {
            ViewChannelSplitButton.ToolTipText = _channel.ChannelInfoUrl.AbsoluteUri;
        }

        private void ViewEventsSplitButton_ButtonClick(object sender, EventArgs e)
        {
            Parallel.Invoke(() =>
                {
                    DigitallyImported.Components.Utilities.StartProcess(_eventsUrl);
                });
        }

        // powerful pattern
        private void PlaylistsMenu_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            PlaylistsContextMenu.Close(ToolStripDropDownCloseReason.ItemClicked);

            PlaylistList playlist = e.ClickedItem as PlaylistList;

            if (playlist != null)
            {
                _channelView.PlaylistTypes = playlist.PlaylistType;

                // temporary, i don't like this...not intuitive to have to select Custom as the playlist type
                if (playlist.PlaylistType == PlaylistTypes.Custom)
                {
                    FavoritesForm<TChannel, TTrack> ff = new FavoritesForm<TChannel, TTrack>(_channelView);
                    DialogResult result = ff.ShowDialog();
                }
                else
                {
                    PlaylistPanel.Channels = _channelView.GetView(true);

                    if (this.InvokeRequired)
                    {
                        this.Invoke((Action) delegate
                        {
                            BindChannelPlaylistPanel();
                            UpdateVisualCues();

                            ViewPlaylistsSplitButton.Text        = playlist.Name;
                            ViewPlaylistsSplitButton.Image       = playlist.Image;
                            ViewPlaylistsSplitButton.Tag         = playlist.SiteUri; // HACK
                            ViewPlaylistsSplitButton.ToolTipText = playlist.SiteUri.AbsoluteUri;
                        });
                    }
                    else
                    {
                        BindChannelPlaylistPanel();
                        UpdateVisualCues();

                        ViewPlaylistsSplitButton.Text        = playlist.Name;
                        ViewPlaylistsSplitButton.Image       = playlist.Image;
                        ViewPlaylistsSplitButton.Tag         = playlist.SiteUri; // HACK
                        ViewPlaylistsSplitButton.ToolTipText = playlist.SiteUri.AbsoluteUri;
                    }
                }
            }
        }

        private void SortPlaylist_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            _channelView.SortBy = SortContextMenu.SortBy;
            PlaylistPanel.Channels = _channelView.Channels;

            PlaylistPanel.Refresh();

            this.BeginInvoke((Action) delegate
            {
                SortPlaylistSplitButton.Text = e.ClickedItem.Text;
                // SortPlaylist_Click(sender, e);
            });
            UpdateVisualCues();
        }

        // implement
        private void SortPlaylist_ButtonClick(object sender, EventArgs e)
        {

        }

        private void PlayerType_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            this.BeginInvoke((Action) delegate
            {
                PlayerTypeSplitButton.Text = e.ClickedItem.Text;
                _playerLoader.PlayerType = DigitallyImported.Utilities.Utilities.ParseEnum<PlayerTypes>(e.ClickedItem.Name);
            });
        }

        /// <summary>
        /// 
        /// </summary>
        protected internal void UpdateVisualCues()
        {
            PlaylistPanel.Enabled = true;

            if (PlaylistPanel.Channels.Count > 0)
            {
                _channel = PlaylistPanel.Channels[_channel.Name]
                    ?? PlaylistPanel.Channels[new Random().Next(PlaylistPanel.Channels.Count > 0 ? PlaylistPanel.Channels.Count : 0)];

                _channel.IsSelected = true;
            }

            ConnectionStatusLabel.Text     = string.Format("{0} {1}", PlaylistPanel.Channels.Count, "channels loaded");
            ViewChannelSplitButton.Text    = _channel.ChannelName;
            ViewChannelSplitButton.Image   = _channel.SiteIcon.ToBitmap();
            ViewPlaylistsSplitButton.Text  = DigitallyImported.Utilities.Utilities.GetPlaylistTypes<PlaylistTypes>(Settings.Default.PlaylistTypes).ToString();
            ViewPlaylistsSplitButton.Image = _channel.SiteIcon.ToBitmap();
            //MainNotifyIcon.Icon          = _channel.SiteIcon;
            ParentForm.Icon                = _channel.SiteIcon;

            // do all of these need to be here?
            RefreshPlaylistButton.Text       = "Refresh Playlist";
            PlaylistRefreshProgress.Visible  = false;
            RefreshPlaylistButton.Enabled    = true;
            ViewChannelSplitButton.Enabled   = true;
            ViewPlaylistsSplitButton.Enabled = true;
            SortPlaylistSplitButton.Enabled  = true;
            PlayerTypeSplitButton.Enabled    = true;

            SetTrackText(_channel.CurrentTrack);
        }

        // this method is a performance sucking machine
        private void BindChannelPlaylistPanel()
        {
            // if (PlaylistPanel.Controls.Count == 0 || !_channelView.IsViewSet)
            if (PlaylistPanel.Controls.Count != PlaylistPanel.Channels.Count) // beyond hacky
            {
                PlaylistPanel.Controls.Clear();
                PlaylistPanel.Controls.AddRange(PlaylistPanel.Channels.ToArray());

                // subscribe to the TrackChanged events here:
                // this will run EVERY TIME PLAYLIST IS REFRESHED...very expensive, so move elsewhere
                // PlaylistPanel.Channels.ForEach(delegate(TChannel channel)
                Parallel.ForEach<IChannel>(PlaylistPanel.Channels, channel =>
                {
                    channel.TrackChanged -= (s, ee) => { GC.Collect(); };
                    channel.TrackChanged += (s, ee) =>
                    {
                        this.Invoke((Action) delegate
                        {
                            // first change the title of the window
                            if (ee.RefreshedContent.TrackTitle.Equals(_channel.CurrentTrack.TrackTitle, StringComparison.CurrentCultureIgnoreCase) && _channel.IsSelected)
                                SetTrackText(ee.RefreshedContent);

                            // show some toast to the user
                            if (Settings.Default.ShowUserToast)
                            {
                                ChannelToastForm<IChannel> toast = new ChannelToastForm<IChannel>(ee.RefreshedContent.ParentChannel);
                                toast.TitleText = ee.RefreshedContent.ParentChannel.ChannelName;
                                toast.BodyText = string.Format("Track changed to {0}", ee.RefreshedContent.TrackTitle);
                                toast.ForeColor = Color.Black;
                                toast.Notify();
                            }
                        });
                    };
                    channel.Tracks[0].ee -= (s, ee) => { GC.Collect(); };
                    channel.Tracks[0].ee += (s,  ee) =>
                    {
                        this.Invoke((Action) delegate
                        {
                            CommentToastForm<IChannel> toast = new CommentToastForm<IChannel>(ee.RefreshedContent.ParentChannel);
                            toast.TitleText = ee.RefreshedContent.ParentChannel.ChannelName;
                            toast.BodyText = string.Format("{0} new comments for track {1}", ee.NewComments, ee.RefreshedContent.TrackTitle);
                            toast.ForeColor = Color.Black;
                            toast.Notify();
                        });
                    };
                });

                foreach (Control control in PlaylistPanel.Controls)
                {
                    if (control is TChannel)
                    {
                        ((Channel)control).PlaylistHistoryClicked -= (sender, e) => {  };
                        ((Channel)control).PlaylistHistoryClicked += (sender,  e) =>
                        {
                            TChannel channel = sender as TChannel;

                            if (channel != null)
                            {
                                if (_trackHistory == null)
                                {
                                    _trackHistory = new HistoryForm(channel);
                                    _trackHistory.Show();
                                }
                                else
                                {
                                    _trackHistory.Channel = channel;
                                    _trackHistory.Show();
                                }
                                _trackHistory.Activate();
                                // _trackHistory.Location = this.PointToScreen(this.PlaylistPanel.Controls[((Control)c).Name].Location);
                            }
                        };
                    }
                }
            }

            else
            {
                // just rebuild the collection here

            }
        }

        private void SetTrackText(ITrack track)
        {
            string displayText = string.Format("{0} {1} {2}", track.ParentChannel.ChannelName, P.Resources.ColonSeparator, track.TrackTitle) ?? string.Empty;

            MainNotifyIcon.Text = (displayText.Length > 63) ? displayText.Remove(63) : displayText;
            this.ParentForm.Text = displayText;
        }

        private void ExitApplication(object sender, EventArgs e)
        {
            Dispose();
            Application.Exit();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="keyData"></param>
        /// <returns></returns>
        protected override bool ProcessDialogKey(Keys keyData)
        {
            if (keyData.Equals(Keys.F5))
            {
                RefreshPlaylistButton.PerformClick();
                return true;
            }
            else
                return false;
        }

        private void FeedbackButton_Click(object sender, EventArgs e)
        {
            DigitallyImported.Components.Utilities.StartProcess(Resources.Properties.Resources.SupportPageUrl);
        }

        private void DISiteUnavailable()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke((Action) delegate
                {
                    ConnectionStatusLabel.Visible = false;
                    PlaylistRefreshProgress.Visible = false;
                    ExceptionStatusMessage.Visible = true;
                    ExceptionStatusMessage.Text = serviceOfflineMessage;
                });
            }
            else
            {
                ConnectionStatusLabel.Visible = false;
                PlaylistRefreshProgress.Visible = false;
                ExceptionStatusMessage.Visible = true;
                ExceptionStatusMessage.Text = serviceOfflineMessage;
            }
        }
        private void PremiumAuthenticationFailure(System.Web.HttpException exc)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke((Action) delegate
                {
                    ConnectionStatusLabel.Visible = false;
                    PlaylistRefreshProgress.Visible = false;
                    ExceptionStatusMessage.Visible = true;
                    ExceptionStatusMessage.Text = string.Format("{0}: {1}", exc.GetHttpCode().ToString(), exc.Message);
                });
            }
            else
            {
                ConnectionStatusLabel.Visible = false;
                PlaylistRefreshProgress.Visible = false;
                ExceptionStatusMessage.Visible = true;
                ExceptionStatusMessage.Text = string.Format("{0}: {1}", exc.GetHttpCode().ToString(), exc.Message);
            }
        }
    }
}
