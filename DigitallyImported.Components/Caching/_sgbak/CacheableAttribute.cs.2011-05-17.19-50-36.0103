using System;


namespace DigitallyImported.Components.Caching
{
    /// <summary>
    /// Allows an item to be cached
    /// </summary>
    [AttributeUsage(AttributeTargets.All
        , AllowMultiple=false, Inherited=true)]
    public class CacheableAttribute : System.Attribute, ICacheable<T>
    {
        /// <summary>
        /// 
        /// </summary>
        public CacheableAttribute() 
            // : this(value, Globals.GetCacheExpirationDateTime())

        {   // auto insert into cache if this attribute is on the class
        }

        //public CacheableAttribute(object value, DateTime absoluteExpiration)
        //    : this(value, absoluteExpiration, CachedItem.Refresh)
        //{
        //}

        //public CacheableAttribute(object value, DateTime absoluteExpiration, CacheItemRemovedCallback callbackFunction)
        //{
        //    _cacheKey = value.GetHashCode().ToString();
        //}

        /// <summary>
        /// 
        /// </summary>
        public string CacheKey
        {
            get { return _cacheKey; }
        }
        private string _cacheKey;

        /// <summary>
        /// 
        /// </summary>
        public object CacheValue
        {
            get { return _cacheValue; }
        }
        private object _cacheValue;

        #region ICache Members

        public void ClearItems<T>()
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public T GetItem<T>(T cacheItem)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public void InsertItem<T>(T cacheItem)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public void RemoveItem<T>(T cacheItem)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        #endregion
    }
}
