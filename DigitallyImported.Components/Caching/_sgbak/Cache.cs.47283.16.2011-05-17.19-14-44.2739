using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Caching;

using DigitallyImported.Configuration.Properties;

namespace DigitallyImported.Components.Caching
{
    /// <summary>
    /// Summary description for Cache.
    /// </summary> // RENAME THIS CLASS!
    internal class Cache<K, V> : Dictionary<string, object>
    {
        private Cache() { }

        private static MemoryCache _cache;


        /// <summary>
        /// 
        /// </summary>
        /// <param name="cacheKey"></param>
        /// <param name="cacheItem"></param>
        /// <returns></returns>
        internal V this[K cacheKey, V cacheItem]
        {
            get { return Get(cacheKey); }
            set { Insert(cacheKey, cacheItem); }
        }

        /// <summary>
        /// Static initializer should ensure we only have to look up the current cache
        /// instance once.
        /// </summary>
        static Cache()
        {
            _cache = MemoryCache.Default;
        }

        /// <summary>
        /// 
        /// </summary>
        internal new static void Clear()
        {
            _cache.Dispose();
            _cache = MemoryCache.Default;
        }

        /// <summary>
        /// Removes the specified cacheKey from the cache
        /// </summary>
        /// <param name="cacheKey"></param>
        internal static void Remove(K cacheKey)
        {
            //_cacheObs.Remove(cacheKey as string);

            _cache.Remove(cacheKey as string);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cacheKey"></param>
        /// <param name="cacheItem"></param>
        /// <param name="cacheDependency"></param>
        internal static void Insert(K cacheKey, V cacheItem)
        {
            Insert(cacheKey
                , cacheItem
                , CachedItem<IContent>.GetExpirationTime());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cacheKey"></param>
        /// <param name="cacheItem"></param>
        /// <param name="cacheDependency"></param>
        /// <param name="expirationInterval"></param>
        internal static void Insert(K cacheKey, V cacheItem, DateTime expirationTime)
        {
            _cache.Add(cacheKey as string
                , cacheItem
                , new DateTimeOffset().AddMilliseconds
                    (Settings.Default.PlaylistRefreshInterval.TotalMilliseconds / 2));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cacheKey"></param>
        /// <returns></returns>
        internal static V Get(K cacheKey)
        {
            return (V)_cache[cacheKey as string];
        }

        /// <summary>
        /// 
        /// </summary>
        internal new static int Count
        {
            get { return (int)_cache.GetCount(); }
        }
    }
}
