//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace DigitallyImported.Components
{

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Channels")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ChannelData : System.Data.DataSet
    {

        private PLAYLISTSDataTable tablePLAYLISTS;

        private CHANNELSDataTable tableCHANNELS;

        private CHANNELDataTable tableCHANNEL;

        private TRACKSDataTable tableTRACKS;

        private TRACKDataTable tableTRACK;

        private EXTRAURLDataTable tableEXTRAURL;

        private BUYURL1DataTable tableBUYURL1;

        private BUYURL2DataTable tableBUYURL2;

        private System.Data.DataRelation relationPLAYLISTS_CHANNELS;

        private System.Data.DataRelation relationCHANNELS_CHANNEL;

        private System.Data.DataRelation relationCHANNEL_TRACKS;

        private System.Data.DataRelation relationTRACKS_TRACK;

        private System.Data.DataRelation relationTRACK_EXTRAURL;

        private System.Data.DataRelation relationTRACK_BUYURL1;

        private System.Data.DataRelation relationTRACK_BUYURL2;

        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ChannelData()
        {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ChannelData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            :
                base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema))
            {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PLAYLISTS"] != null))
                {
                    base.Tables.Add(new PLAYLISTSDataTable(ds.Tables["PLAYLISTS"]));
                }
                if ((ds.Tables["CHANNELS"] != null))
                {
                    base.Tables.Add(new CHANNELSDataTable(ds.Tables["CHANNELS"]));
                }
                if ((ds.Tables["CHANNEL"] != null))
                {
                    base.Tables.Add(new CHANNELDataTable(ds.Tables["CHANNEL"]));
                }
                if ((ds.Tables["TRACKS"] != null))
                {
                    base.Tables.Add(new TRACKSDataTable(ds.Tables["TRACKS"]));
                }
                if ((ds.Tables["TRACK"] != null))
                {
                    base.Tables.Add(new TRACKDataTable(ds.Tables["TRACK"]));
                }
                if ((ds.Tables["EXTRAURL"] != null))
                {
                    base.Tables.Add(new EXTRAURLDataTable(ds.Tables["EXTRAURL"]));
                }
                if ((ds.Tables["BUYURL1"] != null))
                {
                    base.Tables.Add(new BUYURL1DataTable(ds.Tables["BUYURL1"]));
                }
                if ((ds.Tables["BUYURL2"] != null))
                {
                    base.Tables.Add(new BUYURL2DataTable(ds.Tables["BUYURL2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PLAYLISTSDataTable PLAYLISTS
        {
            get
            {
                return this.tablePLAYLISTS;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CHANNELSDataTable CHANNELS
        {
            get
            {
                return this.tableCHANNELS;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CHANNELDataTable CHANNEL
        {
            get
            {
                return this.tableCHANNEL;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRACKSDataTable TRACKS
        {
            get
            {
                return this.tableTRACKS;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRACKDataTable TRACK
        {
            get
            {
                return this.tableTRACK;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EXTRAURLDataTable EXTRAURL
        {
            get
            {
                return this.tableEXTRAURL;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BUYURL1DataTable BUYURL1
        {
            get
            {
                return this.tableBUYURL1;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BUYURL2DataTable BUYURL2
        {
            get
            {
                return this.tableBUYURL2;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone()
        {
            ChannelData cln = ((ChannelData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PLAYLISTS"] != null))
                {
                    base.Tables.Add(new PLAYLISTSDataTable(ds.Tables["PLAYLISTS"]));
                }
                if ((ds.Tables["CHANNELS"] != null))
                {
                    base.Tables.Add(new CHANNELSDataTable(ds.Tables["CHANNELS"]));
                }
                if ((ds.Tables["CHANNEL"] != null))
                {
                    base.Tables.Add(new CHANNELDataTable(ds.Tables["CHANNEL"]));
                }
                if ((ds.Tables["TRACKS"] != null))
                {
                    base.Tables.Add(new TRACKSDataTable(ds.Tables["TRACKS"]));
                }
                if ((ds.Tables["TRACK"] != null))
                {
                    base.Tables.Add(new TRACKDataTable(ds.Tables["TRACK"]));
                }
                if ((ds.Tables["EXTRAURL"] != null))
                {
                    base.Tables.Add(new EXTRAURLDataTable(ds.Tables["EXTRAURL"]));
                }
                if ((ds.Tables["BUYURL1"] != null))
                {
                    base.Tables.Add(new BUYURL1DataTable(ds.Tables["BUYURL1"]));
                }
                if ((ds.Tables["BUYURL2"] != null))
                {
                    base.Tables.Add(new BUYURL2DataTable(ds.Tables["BUYURL2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tablePLAYLISTS = ((PLAYLISTSDataTable)(base.Tables["PLAYLISTS"]));
            if ((initTable == true))
            {
                if ((this.tablePLAYLISTS != null))
                {
                    this.tablePLAYLISTS.InitVars();
                }
            }
            this.tableCHANNELS = ((CHANNELSDataTable)(base.Tables["CHANNELS"]));
            if ((initTable == true))
            {
                if ((this.tableCHANNELS != null))
                {
                    this.tableCHANNELS.InitVars();
                }
            }
            this.tableCHANNEL = ((CHANNELDataTable)(base.Tables["CHANNEL"]));
            if ((initTable == true))
            {
                if ((this.tableCHANNEL != null))
                {
                    this.tableCHANNEL.InitVars();
                }
            }
            this.tableTRACKS = ((TRACKSDataTable)(base.Tables["TRACKS"]));
            if ((initTable == true))
            {
                if ((this.tableTRACKS != null))
                {
                    this.tableTRACKS.InitVars();
                }
            }
            this.tableTRACK = ((TRACKDataTable)(base.Tables["TRACK"]));
            if ((initTable == true))
            {
                if ((this.tableTRACK != null))
                {
                    this.tableTRACK.InitVars();
                }
            }
            this.tableEXTRAURL = ((EXTRAURLDataTable)(base.Tables["EXTRAURL"]));
            if ((initTable == true))
            {
                if ((this.tableEXTRAURL != null))
                {
                    this.tableEXTRAURL.InitVars();
                }
            }
            this.tableBUYURL1 = ((BUYURL1DataTable)(base.Tables["BUYURL1"]));
            if ((initTable == true))
            {
                if ((this.tableBUYURL1 != null))
                {
                    this.tableBUYURL1.InitVars();
                }
            }
            this.tableBUYURL2 = ((BUYURL2DataTable)(base.Tables["BUYURL2"]));
            if ((initTable == true))
            {
                if ((this.tableBUYURL2 != null))
                {
                    this.tableBUYURL2.InitVars();
                }
            }
            this.relationPLAYLISTS_CHANNELS = this.Relations["PLAYLISTS_CHANNELS"];
            this.relationCHANNELS_CHANNEL = this.Relations["CHANNELS_CHANNEL"];
            this.relationCHANNEL_TRACKS = this.Relations["CHANNEL_TRACKS"];
            this.relationTRACKS_TRACK = this.Relations["TRACKS_TRACK"];
            this.relationTRACK_EXTRAURL = this.Relations["TRACK_EXTRAURL"];
            this.relationTRACK_BUYURL1 = this.Relations["TRACK_BUYURL1"];
            this.relationTRACK_BUYURL2 = this.Relations["TRACK_BUYURL2"];
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePLAYLISTS = new PLAYLISTSDataTable();
            base.Tables.Add(this.tablePLAYLISTS);
            this.tableCHANNELS = new CHANNELSDataTable();
            base.Tables.Add(this.tableCHANNELS);
            this.tableCHANNEL = new CHANNELDataTable();
            base.Tables.Add(this.tableCHANNEL);
            this.tableTRACKS = new TRACKSDataTable();
            base.Tables.Add(this.tableTRACKS);
            this.tableTRACK = new TRACKDataTable();
            base.Tables.Add(this.tableTRACK);
            this.tableEXTRAURL = new EXTRAURLDataTable();
            base.Tables.Add(this.tableEXTRAURL);
            this.tableBUYURL1 = new BUYURL1DataTable();
            base.Tables.Add(this.tableBUYURL1);
            this.tableBUYURL2 = new BUYURL2DataTable();
            base.Tables.Add(this.tableBUYURL2);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("PLAYLISTS_CHANNELS", new System.Data.DataColumn[] {
                    this.tablePLAYLISTS.PLAYLISTS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableCHANNELS.PLAYLISTS_IdColumn});
            this.tableCHANNELS.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CHANNELS_CHANNEL", new System.Data.DataColumn[] {
                    this.tableCHANNELS.CHANNELS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableCHANNEL.CHANNELS_IdColumn});
            this.tableCHANNEL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CHANNEL_TRACKS", new System.Data.DataColumn[] {
                    this.tableCHANNEL.CHANNEL_IdColumn}, new System.Data.DataColumn[] {
                    this.tableTRACKS.CHANNEL_IdColumn});
            this.tableTRACKS.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TRACKS_TRACK", new System.Data.DataColumn[] {
                    this.tableTRACKS.TRACKS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableTRACK.TRACKS_IdColumn});
            this.tableTRACK.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TRACK_EXTRAURL", new System.Data.DataColumn[] {
                    this.tableTRACK.TRACK_IdColumn}, new System.Data.DataColumn[] {
                    this.tableEXTRAURL.TRACK_IdColumn});
            this.tableEXTRAURL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TRACK_BUYURL1", new System.Data.DataColumn[] {
                    this.tableTRACK.TRACK_IdColumn}, new System.Data.DataColumn[] {
                    this.tableBUYURL1.TRACK_IdColumn});
            this.tableBUYURL1.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TRACK_BUYURL2", new System.Data.DataColumn[] {
                    this.tableTRACK.TRACK_IdColumn}, new System.Data.DataColumn[] {
                    this.tableBUYURL2.TRACK_IdColumn});
            this.tableBUYURL2.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPLAYLISTS_CHANNELS = new System.Data.DataRelation("PLAYLISTS_CHANNELS", new System.Data.DataColumn[] {
                    this.tablePLAYLISTS.PLAYLISTS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableCHANNELS.PLAYLISTS_IdColumn}, false);
            this.relationPLAYLISTS_CHANNELS.Nested = true;
            this.Relations.Add(this.relationPLAYLISTS_CHANNELS);
            this.relationCHANNELS_CHANNEL = new System.Data.DataRelation("CHANNELS_CHANNEL", new System.Data.DataColumn[] {
                    this.tableCHANNELS.CHANNELS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableCHANNEL.CHANNELS_IdColumn}, false);
            this.relationCHANNELS_CHANNEL.Nested = true;
            this.Relations.Add(this.relationCHANNELS_CHANNEL);
            this.relationCHANNEL_TRACKS = new System.Data.DataRelation("CHANNEL_TRACKS", new System.Data.DataColumn[] {
                    this.tableCHANNEL.CHANNEL_IdColumn}, new System.Data.DataColumn[] {
                    this.tableTRACKS.CHANNEL_IdColumn}, false);
            this.relationCHANNEL_TRACKS.Nested = true;
            this.Relations.Add(this.relationCHANNEL_TRACKS);
            this.relationTRACKS_TRACK = new System.Data.DataRelation("TRACKS_TRACK", new System.Data.DataColumn[] {
                    this.tableTRACKS.TRACKS_IdColumn}, new System.Data.DataColumn[] {
                    this.tableTRACK.TRACKS_IdColumn}, false);
            this.relationTRACKS_TRACK.Nested = true;
            this.Relations.Add(this.relationTRACKS_TRACK);
            this.relationTRACK_EXTRAURL = new System.Data.DataRelation("TRACK_EXTRAURL", new System.Data.DataColumn[] {
                    this.tableTRACK.TRACK_IdColumn}, new System.Data.DataColumn[] {
                    this.tableEXTRAURL.TRACK_IdColumn}, false);
            this.relationTRACK_EXTRAURL.Nested = true;
            this.Relations.Add(this.relationTRACK_EXTRAURL);
            this.relationTRACK_BUYURL1 = new System.Data.DataRelation("TRACK_BUYURL1", new System.Data.DataColumn[] {
                    this.tableTRACK.TRACK_IdColumn}, new System.Data.DataColumn[] {
                    this.tableBUYURL1.TRACK_IdColumn}, false);
            this.relationTRACK_BUYURL1.Nested = true;
            this.Relations.Add(this.relationTRACK_BUYURL1);
            this.relationTRACK_BUYURL2 = new System.Data.DataRelation("TRACK_BUYURL2", new System.Data.DataColumn[] {
                    this.tableTRACK.TRACK_IdColumn}, new System.Data.DataColumn[] {
                    this.tableBUYURL2.TRACK_IdColumn}, false);
            this.relationTRACK_BUYURL2.Nested = true;
            this.Relations.Add(this.relationTRACK_BUYURL2);
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePLAYLISTS()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCHANNELS()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCHANNEL()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTRACKS()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTRACK()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEXTRAURL()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBUYURL1()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBUYURL2()
        {
            return false;
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            ChannelData ds = new ChannelData();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }

        public delegate void PLAYLISTSRowChangeEventHandler(object sender, PLAYLISTSRowChangeEvent e);

        public delegate void CHANNELSRowChangeEventHandler(object sender, CHANNELSRowChangeEvent e);

        public delegate void CHANNELRowChangeEventHandler(object sender, CHANNELRowChangeEvent e);

        public delegate void TRACKSRowChangeEventHandler(object sender, TRACKSRowChangeEvent e);

        public delegate void TRACKRowChangeEventHandler(object sender, TRACKRowChangeEvent e);

        public delegate void EXTRAURLRowChangeEventHandler(object sender, EXTRAURLRowChangeEvent e);

        public delegate void BUYURL1RowChangeEventHandler(object sender, BUYURL1RowChangeEvent e);

        public delegate void BUYURL2RowChangeEventHandler(object sender, BUYURL2RowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PLAYLISTSDataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnSTATIONTITLE;

            private System.Data.DataColumn columnSTATIONURL;

            private System.Data.DataColumn columnGENERATETIME;

            private System.Data.DataColumn columnPLAYLISTS_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSDataTable()
            {
                this.TableName = "PLAYLISTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PLAYLISTSDataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PLAYLISTSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STATIONTITLEColumn
            {
                get
                {
                    return this.columnSTATIONTITLE;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STATIONURLColumn
            {
                get
                {
                    return this.columnSTATIONURL;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GENERATETIMEColumn
            {
                get
                {
                    return this.columnGENERATETIME;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PLAYLISTS_IdColumn
            {
                get
                {
                    return this.columnPLAYLISTS_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSRow this[int index]
            {
                get
                {
                    return ((PLAYLISTSRow)(this.Rows[index]));
                }
            }

            public event PLAYLISTSRowChangeEventHandler PLAYLISTSRowChanging;

            public event PLAYLISTSRowChangeEventHandler PLAYLISTSRowChanged;

            public event PLAYLISTSRowChangeEventHandler PLAYLISTSRowDeleting;

            public event PLAYLISTSRowChangeEventHandler PLAYLISTSRowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPLAYLISTSRow(PLAYLISTSRow row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSRow AddPLAYLISTSRow(string STATIONTITLE, string STATIONURL, string GENERATETIME)
            {
                PLAYLISTSRow rowPLAYLISTSRow = ((PLAYLISTSRow)(this.NewRow()));
                rowPLAYLISTSRow.ItemArray = new object[] {
                    STATIONTITLE,
                    STATIONURL,
                    GENERATETIME,
                    null};
                this.Rows.Add(rowPLAYLISTSRow);
                return rowPLAYLISTSRow;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                PLAYLISTSDataTable cln = ((PLAYLISTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new PLAYLISTSDataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnSTATIONTITLE = base.Columns["STATIONTITLE"];
                this.columnSTATIONURL = base.Columns["STATIONURL"];
                this.columnGENERATETIME = base.Columns["GENERATETIME"];
                this.columnPLAYLISTS_Id = base.Columns["PLAYLISTS_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnSTATIONTITLE = new System.Data.DataColumn("STATIONTITLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIONTITLE);
                this.columnSTATIONURL = new System.Data.DataColumn("STATIONURL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIONURL);
                this.columnGENERATETIME = new System.Data.DataColumn("GENERATETIME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENERATETIME);
                this.columnPLAYLISTS_Id = new System.Data.DataColumn("PLAYLISTS_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPLAYLISTS_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnPLAYLISTS_Id}, true));
                this.columnPLAYLISTS_Id.AutoIncrement = true;
                this.columnPLAYLISTS_Id.AllowDBNull = false;
                this.columnPLAYLISTS_Id.Unique = true;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSRow NewPLAYLISTSRow()
            {
                return ((PLAYLISTSRow)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new PLAYLISTSRow(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(PLAYLISTSRow);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PLAYLISTSRowChanged != null))
                {
                    this.PLAYLISTSRowChanged(this, new PLAYLISTSRowChangeEvent(((PLAYLISTSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PLAYLISTSRowChanging != null))
                {
                    this.PLAYLISTSRowChanging(this, new PLAYLISTSRowChangeEvent(((PLAYLISTSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PLAYLISTSRowDeleted != null))
                {
                    this.PLAYLISTSRowDeleted(this, new PLAYLISTSRowChangeEvent(((PLAYLISTSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PLAYLISTSRowDeleting != null))
                {
                    this.PLAYLISTSRowDeleting(this, new PLAYLISTSRowChangeEvent(((PLAYLISTSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePLAYLISTSRow(PLAYLISTSRow row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PLAYLISTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CHANNELSDataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnCHANNELS_Id;

            private System.Data.DataColumn columnPLAYLISTS_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSDataTable()
            {
                this.TableName = "CHANNELS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CHANNELSDataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CHANNELSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CHANNELS_IdColumn
            {
                get
                {
                    return this.columnCHANNELS_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PLAYLISTS_IdColumn
            {
                get
                {
                    return this.columnPLAYLISTS_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRow this[int index]
            {
                get
                {
                    return ((CHANNELSRow)(this.Rows[index]));
                }
            }

            public event CHANNELSRowChangeEventHandler CHANNELSRowChanging;

            public event CHANNELSRowChangeEventHandler CHANNELSRowChanged;

            public event CHANNELSRowChangeEventHandler CHANNELSRowDeleting;

            public event CHANNELSRowChangeEventHandler CHANNELSRowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCHANNELSRow(CHANNELSRow row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRow AddCHANNELSRow(PLAYLISTSRow parentPLAYLISTSRowByPLAYLISTS_CHANNELS)
            {
                CHANNELSRow rowCHANNELSRow = ((CHANNELSRow)(this.NewRow()));
                rowCHANNELSRow.ItemArray = new object[] {
                    null,
                    parentPLAYLISTSRowByPLAYLISTS_CHANNELS[3]};
                this.Rows.Add(rowCHANNELSRow);
                return rowCHANNELSRow;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                CHANNELSDataTable cln = ((CHANNELSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new CHANNELSDataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnCHANNELS_Id = base.Columns["CHANNELS_Id"];
                this.columnPLAYLISTS_Id = base.Columns["PLAYLISTS_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnCHANNELS_Id = new System.Data.DataColumn("CHANNELS_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCHANNELS_Id);
                this.columnPLAYLISTS_Id = new System.Data.DataColumn("PLAYLISTS_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPLAYLISTS_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnCHANNELS_Id}, true));
                this.columnCHANNELS_Id.AutoIncrement = true;
                this.columnCHANNELS_Id.AllowDBNull = false;
                this.columnCHANNELS_Id.Unique = true;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRow NewCHANNELSRow()
            {
                return ((CHANNELSRow)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new CHANNELSRow(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(CHANNELSRow);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CHANNELSRowChanged != null))
                {
                    this.CHANNELSRowChanged(this, new CHANNELSRowChangeEvent(((CHANNELSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CHANNELSRowChanging != null))
                {
                    this.CHANNELSRowChanging(this, new CHANNELSRowChangeEvent(((CHANNELSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CHANNELSRowDeleted != null))
                {
                    this.CHANNELSRowDeleted(this, new CHANNELSRowChangeEvent(((CHANNELSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CHANNELSRowDeleting != null))
                {
                    this.CHANNELSRowDeleting(this, new CHANNELSRowChangeEvent(((CHANNELSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCHANNELSRow(CHANNELSRow row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CHANNELSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CHANNELDataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnCHANNELTITLE;

            private System.Data.DataColumn columnCHANNEL_Id;

            private System.Data.DataColumn columnCHANNELS_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELDataTable()
            {
                this.TableName = "CHANNEL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CHANNELDataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CHANNELDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CHANNELTITLEColumn
            {
                get
                {
                    return this.columnCHANNELTITLE;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CHANNEL_IdColumn
            {
                get
                {
                    return this.columnCHANNEL_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CHANNELS_IdColumn
            {
                get
                {
                    return this.columnCHANNELS_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRow this[int index]
            {
                get
                {
                    return ((CHANNELRow)(this.Rows[index]));
                }
            }

            public event CHANNELRowChangeEventHandler CHANNELRowChanging;

            public event CHANNELRowChangeEventHandler CHANNELRowChanged;

            public event CHANNELRowChangeEventHandler CHANNELRowDeleting;

            public event CHANNELRowChangeEventHandler CHANNELRowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCHANNELRow(CHANNELRow row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRow AddCHANNELRow(string CHANNELTITLE, CHANNELSRow parentCHANNELSRowByCHANNELS_CHANNEL)
            {
                CHANNELRow rowCHANNELRow = ((CHANNELRow)(this.NewRow()));
                rowCHANNELRow.ItemArray = new object[] {
                    CHANNELTITLE,
                    null,
                    parentCHANNELSRowByCHANNELS_CHANNEL[0]};
                this.Rows.Add(rowCHANNELRow);
                return rowCHANNELRow;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                CHANNELDataTable cln = ((CHANNELDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new CHANNELDataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnCHANNELTITLE = base.Columns["CHANNELTITLE"];
                this.columnCHANNEL_Id = base.Columns["CHANNEL_Id"];
                this.columnCHANNELS_Id = base.Columns["CHANNELS_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnCHANNELTITLE = new System.Data.DataColumn("CHANNELTITLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHANNELTITLE);
                this.columnCHANNEL_Id = new System.Data.DataColumn("CHANNEL_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCHANNEL_Id);
                this.columnCHANNELS_Id = new System.Data.DataColumn("CHANNELS_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCHANNELS_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnCHANNEL_Id}, true));
                this.columnCHANNEL_Id.AutoIncrement = true;
                this.columnCHANNEL_Id.AllowDBNull = false;
                this.columnCHANNEL_Id.Unique = true;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRow NewCHANNELRow()
            {
                return ((CHANNELRow)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new CHANNELRow(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(CHANNELRow);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CHANNELRowChanged != null))
                {
                    this.CHANNELRowChanged(this, new CHANNELRowChangeEvent(((CHANNELRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CHANNELRowChanging != null))
                {
                    this.CHANNELRowChanging(this, new CHANNELRowChangeEvent(((CHANNELRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CHANNELRowDeleted != null))
                {
                    this.CHANNELRowDeleted(this, new CHANNELRowChangeEvent(((CHANNELRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CHANNELRowDeleting != null))
                {
                    this.CHANNELRowDeleting(this, new CHANNELRowChangeEvent(((CHANNELRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCHANNELRow(CHANNELRow row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CHANNELDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRACKSDataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnTRACKS_Id;

            private System.Data.DataColumn columnCHANNEL_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSDataTable()
            {
                this.TableName = "TRACKS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRACKSDataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TRACKSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACKS_IdColumn
            {
                get
                {
                    return this.columnTRACKS_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CHANNEL_IdColumn
            {
                get
                {
                    return this.columnCHANNEL_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRow this[int index]
            {
                get
                {
                    return ((TRACKSRow)(this.Rows[index]));
                }
            }

            public event TRACKSRowChangeEventHandler TRACKSRowChanging;

            public event TRACKSRowChangeEventHandler TRACKSRowChanged;

            public event TRACKSRowChangeEventHandler TRACKSRowDeleting;

            public event TRACKSRowChangeEventHandler TRACKSRowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTRACKSRow(TRACKSRow row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRow AddTRACKSRow(CHANNELRow parentCHANNELRowByCHANNEL_TRACKS)
            {
                TRACKSRow rowTRACKSRow = ((TRACKSRow)(this.NewRow()));
                rowTRACKSRow.ItemArray = new object[] {
                    null,
                    parentCHANNELRowByCHANNEL_TRACKS[1]};
                this.Rows.Add(rowTRACKSRow);
                return rowTRACKSRow;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                TRACKSDataTable cln = ((TRACKSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new TRACKSDataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnTRACKS_Id = base.Columns["TRACKS_Id"];
                this.columnCHANNEL_Id = base.Columns["CHANNEL_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnTRACKS_Id = new System.Data.DataColumn("TRACKS_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRACKS_Id);
                this.columnCHANNEL_Id = new System.Data.DataColumn("CHANNEL_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCHANNEL_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnTRACKS_Id}, true));
                this.columnTRACKS_Id.AutoIncrement = true;
                this.columnTRACKS_Id.AllowDBNull = false;
                this.columnTRACKS_Id.Unique = true;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRow NewTRACKSRow()
            {
                return ((TRACKSRow)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new TRACKSRow(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(TRACKSRow);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TRACKSRowChanged != null))
                {
                    this.TRACKSRowChanged(this, new TRACKSRowChangeEvent(((TRACKSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TRACKSRowChanging != null))
                {
                    this.TRACKSRowChanging(this, new TRACKSRowChangeEvent(((TRACKSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TRACKSRowDeleted != null))
                {
                    this.TRACKSRowDeleted(this, new TRACKSRowChangeEvent(((TRACKSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TRACKSRowDeleting != null))
                {
                    this.TRACKSRowDeleting(this, new TRACKSRowChangeEvent(((TRACKSRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTRACKSRow(TRACKSRow row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRACKSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRACKDataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnTRACKTITLE;

            private System.Data.DataColumn columnSTARTTIME;

            private System.Data.DataColumn columnLABEL;

            private System.Data.DataColumn columnTRACKURL;

            private System.Data.DataColumn columnBOARDCOUNT;

            private System.Data.DataColumn columnTRACK_Id;

            private System.Data.DataColumn columnTRACKS_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKDataTable()
            {
                this.TableName = "TRACK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRACKDataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TRACKDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACKTITLEColumn
            {
                get
                {
                    return this.columnTRACKTITLE;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STARTTIMEColumn
            {
                get
                {
                    return this.columnSTARTTIME;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LABELColumn
            {
                get
                {
                    return this.columnLABEL;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACKURLColumn
            {
                get
                {
                    return this.columnTRACKURL;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BOARDCOUNTColumn
            {
                get
                {
                    return this.columnBOARDCOUNT;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACK_IdColumn
            {
                get
                {
                    return this.columnTRACK_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACKS_IdColumn
            {
                get
                {
                    return this.columnTRACKS_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow this[int index]
            {
                get
                {
                    return ((TRACKRow)(this.Rows[index]));
                }
            }

            public event TRACKRowChangeEventHandler TRACKRowChanging;

            public event TRACKRowChangeEventHandler TRACKRowChanged;

            public event TRACKRowChangeEventHandler TRACKRowDeleting;

            public event TRACKRowChangeEventHandler TRACKRowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTRACKRow(TRACKRow row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow AddTRACKRow(string TRACKTITLE, string STARTTIME, string LABEL, string TRACKURL, string BOARDCOUNT, TRACKSRow parentTRACKSRowByTRACKS_TRACK)
            {
                TRACKRow rowTRACKRow = ((TRACKRow)(this.NewRow()));
                rowTRACKRow.ItemArray = new object[] {
                    TRACKTITLE,
                    STARTTIME,
                    LABEL,
                    TRACKURL,
                    BOARDCOUNT,
                    null,
                    parentTRACKSRowByTRACKS_TRACK[0]};
                this.Rows.Add(rowTRACKRow);
                return rowTRACKRow;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                TRACKDataTable cln = ((TRACKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new TRACKDataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnTRACKTITLE = base.Columns["TRACKTITLE"];
                this.columnSTARTTIME = base.Columns["STARTTIME"];
                this.columnLABEL = base.Columns["LABEL"];
                this.columnTRACKURL = base.Columns["TRACKURL"];
                this.columnBOARDCOUNT = base.Columns["BOARDCOUNT"];
                this.columnTRACK_Id = base.Columns["TRACK_Id"];
                this.columnTRACKS_Id = base.Columns["TRACKS_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnTRACKTITLE = new System.Data.DataColumn("TRACKTITLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRACKTITLE);
                this.columnSTARTTIME = new System.Data.DataColumn("STARTTIME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTARTTIME);
                this.columnLABEL = new System.Data.DataColumn("LABEL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLABEL);
                this.columnTRACKURL = new System.Data.DataColumn("TRACKURL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRACKURL);
                this.columnBOARDCOUNT = new System.Data.DataColumn("BOARDCOUNT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBOARDCOUNT);
                this.columnTRACK_Id = new System.Data.DataColumn("TRACK_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRACK_Id);
                this.columnTRACKS_Id = new System.Data.DataColumn("TRACKS_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRACKS_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnTRACK_Id}, true));
                this.columnTRACK_Id.AutoIncrement = true;
                this.columnTRACK_Id.AllowDBNull = false;
                this.columnTRACK_Id.Unique = true;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow NewTRACKRow()
            {
                return ((TRACKRow)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new TRACKRow(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(TRACKRow);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TRACKRowChanged != null))
                {
                    this.TRACKRowChanged(this, new TRACKRowChangeEvent(((TRACKRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TRACKRowChanging != null))
                {
                    this.TRACKRowChanging(this, new TRACKRowChangeEvent(((TRACKRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TRACKRowDeleted != null))
                {
                    this.TRACKRowDeleted(this, new TRACKRowChangeEvent(((TRACKRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TRACKRowDeleting != null))
                {
                    this.TRACKRowDeleting(this, new TRACKRowChangeEvent(((TRACKRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTRACKRow(TRACKRow row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRACKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EXTRAURLDataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnTITLE;

            private System.Data.DataColumn columnEXTRAURL_Text;

            private System.Data.DataColumn columnTRACK_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLDataTable()
            {
                this.TableName = "EXTRAURL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EXTRAURLDataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EXTRAURLDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TITLEColumn
            {
                get
                {
                    return this.columnTITLE;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EXTRAURL_TextColumn
            {
                get
                {
                    return this.columnEXTRAURL_Text;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACK_IdColumn
            {
                get
                {
                    return this.columnTRACK_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLRow this[int index]
            {
                get
                {
                    return ((EXTRAURLRow)(this.Rows[index]));
                }
            }

            public event EXTRAURLRowChangeEventHandler EXTRAURLRowChanging;

            public event EXTRAURLRowChangeEventHandler EXTRAURLRowChanged;

            public event EXTRAURLRowChangeEventHandler EXTRAURLRowDeleting;

            public event EXTRAURLRowChangeEventHandler EXTRAURLRowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEXTRAURLRow(EXTRAURLRow row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLRow AddEXTRAURLRow(string TITLE, string EXTRAURL_Text, TRACKRow parentTRACKRowByTRACK_EXTRAURL)
            {
                EXTRAURLRow rowEXTRAURLRow = ((EXTRAURLRow)(this.NewRow()));
                rowEXTRAURLRow.ItemArray = new object[] {
                    TITLE,
                    EXTRAURL_Text,
                    parentTRACKRowByTRACK_EXTRAURL[5]};
                this.Rows.Add(rowEXTRAURLRow);
                return rowEXTRAURLRow;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                EXTRAURLDataTable cln = ((EXTRAURLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new EXTRAURLDataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnTITLE = base.Columns["TITLE"];
                this.columnEXTRAURL_Text = base.Columns["EXTRAURL_Text"];
                this.columnTRACK_Id = base.Columns["TRACK_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnTITLE = new System.Data.DataColumn("TITLE", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTITLE);
                this.columnEXTRAURL_Text = new System.Data.DataColumn("EXTRAURL_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnEXTRAURL_Text);
                this.columnTRACK_Id = new System.Data.DataColumn("TRACK_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRACK_Id);
                this.columnTITLE.Namespace = "";
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLRow NewEXTRAURLRow()
            {
                return ((EXTRAURLRow)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new EXTRAURLRow(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(EXTRAURLRow);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.EXTRAURLRowChanged != null))
                {
                    this.EXTRAURLRowChanged(this, new EXTRAURLRowChangeEvent(((EXTRAURLRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.EXTRAURLRowChanging != null))
                {
                    this.EXTRAURLRowChanging(this, new EXTRAURLRowChangeEvent(((EXTRAURLRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.EXTRAURLRowDeleted != null))
                {
                    this.EXTRAURLRowDeleted(this, new EXTRAURLRowChangeEvent(((EXTRAURLRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.EXTRAURLRowDeleting != null))
                {
                    this.EXTRAURLRowDeleting(this, new EXTRAURLRowChangeEvent(((EXTRAURLRow)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEXTRAURLRow(EXTRAURLRow row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EXTRAURLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BUYURL1DataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnFROM;

            private System.Data.DataColumn columnTRACK_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1DataTable()
            {
                this.TableName = "BUYURL1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BUYURL1DataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BUYURL1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FROMColumn
            {
                get
                {
                    return this.columnFROM;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACK_IdColumn
            {
                get
                {
                    return this.columnTRACK_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1Row this[int index]
            {
                get
                {
                    return ((BUYURL1Row)(this.Rows[index]));
                }
            }

            public event BUYURL1RowChangeEventHandler BUYURL1RowChanging;

            public event BUYURL1RowChangeEventHandler BUYURL1RowChanged;

            public event BUYURL1RowChangeEventHandler BUYURL1RowDeleting;

            public event BUYURL1RowChangeEventHandler BUYURL1RowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBUYURL1Row(BUYURL1Row row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1Row AddBUYURL1Row(string FROM, TRACKRow parentTRACKRowByTRACK_BUYURL1)
            {
                BUYURL1Row rowBUYURL1Row = ((BUYURL1Row)(this.NewRow()));
                rowBUYURL1Row.ItemArray = new object[] {
                    FROM,
                    parentTRACKRowByTRACK_BUYURL1[5]};
                this.Rows.Add(rowBUYURL1Row);
                return rowBUYURL1Row;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                BUYURL1DataTable cln = ((BUYURL1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new BUYURL1DataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnFROM = base.Columns["FROM"];
                this.columnTRACK_Id = base.Columns["TRACK_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnFROM = new System.Data.DataColumn("FROM", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFROM);
                this.columnTRACK_Id = new System.Data.DataColumn("TRACK_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRACK_Id);
                this.columnFROM.Namespace = "";
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1Row NewBUYURL1Row()
            {
                return ((BUYURL1Row)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new BUYURL1Row(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(BUYURL1Row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BUYURL1RowChanged != null))
                {
                    this.BUYURL1RowChanged(this, new BUYURL1RowChangeEvent(((BUYURL1Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BUYURL1RowChanging != null))
                {
                    this.BUYURL1RowChanging(this, new BUYURL1RowChangeEvent(((BUYURL1Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BUYURL1RowDeleted != null))
                {
                    this.BUYURL1RowDeleted(this, new BUYURL1RowChangeEvent(((BUYURL1Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BUYURL1RowDeleting != null))
                {
                    this.BUYURL1RowDeleting(this, new BUYURL1RowChangeEvent(((BUYURL1Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBUYURL1Row(BUYURL1Row row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BUYURL1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BUYURL2DataTable : System.Data.DataTable, System.Collections.IEnumerable
        {

            private System.Data.DataColumn columnFROM;

            private System.Data.DataColumn columnBUYURL2_Text;

            private System.Data.DataColumn columnTRACK_Id;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2DataTable()
            {
                this.TableName = "BUYURL2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BUYURL2DataTable(System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BUYURL2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
                :
                    base(info, context)
            {
                this.InitVars();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FROMColumn
            {
                get
                {
                    return this.columnFROM;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BUYURL2_TextColumn
            {
                get
                {
                    return this.columnBUYURL2_Text;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TRACK_IdColumn
            {
                get
                {
                    return this.columnTRACK_Id;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2Row this[int index]
            {
                get
                {
                    return ((BUYURL2Row)(this.Rows[index]));
                }
            }

            public event BUYURL2RowChangeEventHandler BUYURL2RowChanging;

            public event BUYURL2RowChangeEventHandler BUYURL2RowChanged;

            public event BUYURL2RowChangeEventHandler BUYURL2RowDeleting;

            public event BUYURL2RowChangeEventHandler BUYURL2RowDeleted;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBUYURL2Row(BUYURL2Row row)
            {
                this.Rows.Add(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2Row AddBUYURL2Row(string FROM, string BUYURL2_Text, TRACKRow parentTRACKRowByTRACK_BUYURL2)
            {
                BUYURL2Row rowBUYURL2Row = ((BUYURL2Row)(this.NewRow()));
                rowBUYURL2Row.ItemArray = new object[] {
                    FROM,
                    BUYURL2_Text,
                    parentTRACKRowByTRACK_BUYURL2[5]};
                this.Rows.Add(rowBUYURL2Row);
                return rowBUYURL2Row;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone()
            {
                BUYURL2DataTable cln = ((BUYURL2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance()
            {
                return new BUYURL2DataTable();
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnFROM = base.Columns["FROM"];
                this.columnBUYURL2_Text = base.Columns["BUYURL2_Text"];
                this.columnTRACK_Id = base.Columns["TRACK_Id"];
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnFROM = new System.Data.DataColumn("FROM", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFROM);
                this.columnBUYURL2_Text = new System.Data.DataColumn("BUYURL2_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnBUYURL2_Text);
                this.columnTRACK_Id = new System.Data.DataColumn("TRACK_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRACK_Id);
                this.columnFROM.Namespace = "";
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2Row NewBUYURL2Row()
            {
                return ((BUYURL2Row)(this.NewRow()));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
            {
                return new BUYURL2Row(builder);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType()
            {
                return typeof(BUYURL2Row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BUYURL2RowChanged != null))
                {
                    this.BUYURL2RowChanged(this, new BUYURL2RowChangeEvent(((BUYURL2Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BUYURL2RowChanging != null))
                {
                    this.BUYURL2RowChanging(this, new BUYURL2RowChangeEvent(((BUYURL2Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BUYURL2RowDeleted != null))
                {
                    this.BUYURL2RowDeleted(this, new BUYURL2RowChangeEvent(((BUYURL2Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BUYURL2RowDeleting != null))
                {
                    this.BUYURL2RowDeleting(this, new BUYURL2RowChangeEvent(((BUYURL2Row)(e.Row)), e.Action));
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBUYURL2Row(BUYURL2Row row)
            {
                this.Rows.Remove(row);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ChannelData ds = new ChannelData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BUYURL2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PLAYLISTSRow : System.Data.DataRow
        {

            private PLAYLISTSDataTable tablePLAYLISTS;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PLAYLISTSRow(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tablePLAYLISTS = ((PLAYLISTSDataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIONTITLE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePLAYLISTS.STATIONTITLEColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'STATIONTITLE\' in table \'PLAYLISTS\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePLAYLISTS.STATIONTITLEColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIONURL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePLAYLISTS.STATIONURLColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'STATIONURL\' in table \'PLAYLISTS\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePLAYLISTS.STATIONURLColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GENERATETIME
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePLAYLISTS.GENERATETIMEColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'GENERATETIME\' in table \'PLAYLISTS\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePLAYLISTS.GENERATETIMEColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PLAYLISTS_Id
            {
                get
                {
                    return ((int)(this[this.tablePLAYLISTS.PLAYLISTS_IdColumn]));
                }
                set
                {
                    this[this.tablePLAYLISTS.PLAYLISTS_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIONTITLENull()
            {
                return this.IsNull(this.tablePLAYLISTS.STATIONTITLEColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIONTITLENull()
            {
                this[this.tablePLAYLISTS.STATIONTITLEColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIONURLNull()
            {
                return this.IsNull(this.tablePLAYLISTS.STATIONURLColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIONURLNull()
            {
                this[this.tablePLAYLISTS.STATIONURLColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGENERATETIMENull()
            {
                return this.IsNull(this.tablePLAYLISTS.GENERATETIMEColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGENERATETIMENull()
            {
                this[this.tablePLAYLISTS.GENERATETIMEColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRow[] GetCHANNELSRows()
            {
                return ((CHANNELSRow[])(base.GetChildRows(this.Table.ChildRelations["PLAYLISTS_CHANNELS"])));
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CHANNELSRow : System.Data.DataRow
        {

            private CHANNELSDataTable tableCHANNELS;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CHANNELSRow(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableCHANNELS = ((CHANNELSDataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CHANNELS_Id
            {
                get
                {
                    return ((int)(this[this.tableCHANNELS.CHANNELS_IdColumn]));
                }
                set
                {
                    this[this.tableCHANNELS.CHANNELS_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PLAYLISTS_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCHANNELS.PLAYLISTS_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'PLAYLISTS_Id\' in table \'CHANNELS\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCHANNELS.PLAYLISTS_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSRow PLAYLISTSRow
            {
                get
                {
                    return ((PLAYLISTSRow)(this.GetParentRow(this.Table.ParentRelations["PLAYLISTS_CHANNELS"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PLAYLISTS_CHANNELS"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAYLISTS_IdNull()
            {
                return this.IsNull(this.tableCHANNELS.PLAYLISTS_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAYLISTS_IdNull()
            {
                this[this.tableCHANNELS.PLAYLISTS_IdColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRow[] GetCHANNELRows()
            {
                return ((CHANNELRow[])(base.GetChildRows(this.Table.ChildRelations["CHANNELS_CHANNEL"])));
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CHANNELRow : System.Data.DataRow
        {

            private CHANNELDataTable tableCHANNEL;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CHANNELRow(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableCHANNEL = ((CHANNELDataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHANNELTITLE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCHANNEL.CHANNELTITLEColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'CHANNELTITLE\' in table \'CHANNEL\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCHANNEL.CHANNELTITLEColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CHANNEL_Id
            {
                get
                {
                    return ((int)(this[this.tableCHANNEL.CHANNEL_IdColumn]));
                }
                set
                {
                    this[this.tableCHANNEL.CHANNEL_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CHANNELS_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCHANNEL.CHANNELS_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'CHANNELS_Id\' in table \'CHANNEL\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCHANNEL.CHANNELS_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRow CHANNELSRow
            {
                get
                {
                    return ((CHANNELSRow)(this.GetParentRow(this.Table.ParentRelations["CHANNELS_CHANNEL"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CHANNELS_CHANNEL"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHANNELTITLENull()
            {
                return this.IsNull(this.tableCHANNEL.CHANNELTITLEColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHANNELTITLENull()
            {
                this[this.tableCHANNEL.CHANNELTITLEColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHANNELS_IdNull()
            {
                return this.IsNull(this.tableCHANNEL.CHANNELS_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHANNELS_IdNull()
            {
                this[this.tableCHANNEL.CHANNELS_IdColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRow[] GetTRACKSRows()
            {
                return ((TRACKSRow[])(base.GetChildRows(this.Table.ChildRelations["CHANNEL_TRACKS"])));
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TRACKSRow : System.Data.DataRow
        {

            private TRACKSDataTable tableTRACKS;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRACKSRow(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableTRACKS = ((TRACKSDataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRACKS_Id
            {
                get
                {
                    return ((int)(this[this.tableTRACKS.TRACKS_IdColumn]));
                }
                set
                {
                    this[this.tableTRACKS.TRACKS_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CHANNEL_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableTRACKS.CHANNEL_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'CHANNEL_Id\' in table \'TRACKS\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACKS.CHANNEL_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRow CHANNELRow
            {
                get
                {
                    return ((CHANNELRow)(this.GetParentRow(this.Table.ParentRelations["CHANNEL_TRACKS"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CHANNEL_TRACKS"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHANNEL_IdNull()
            {
                return this.IsNull(this.tableTRACKS.CHANNEL_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHANNEL_IdNull()
            {
                this[this.tableTRACKS.CHANNEL_IdColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow[] GetTRACKRows()
            {
                return ((TRACKRow[])(base.GetChildRows(this.Table.ChildRelations["TRACKS_TRACK"])));
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TRACKRow : System.Data.DataRow
        {

            private TRACKDataTable tableTRACK;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRACKRow(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableTRACK = ((TRACKDataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRACKTITLE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTRACK.TRACKTITLEColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TRACKTITLE\' in table \'TRACK\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACK.TRACKTITLEColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STARTTIME
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTRACK.STARTTIMEColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'STARTTIME\' in table \'TRACK\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACK.STARTTIMEColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LABEL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTRACK.LABELColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'LABEL\' in table \'TRACK\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACK.LABELColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRACKURL
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTRACK.TRACKURLColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TRACKURL\' in table \'TRACK\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACK.TRACKURLColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BOARDCOUNT
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTRACK.BOARDCOUNTColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'BOARDCOUNT\' in table \'TRACK\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACK.BOARDCOUNTColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRACK_Id
            {
                get
                {
                    return ((int)(this[this.tableTRACK.TRACK_IdColumn]));
                }
                set
                {
                    this[this.tableTRACK.TRACK_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRACKS_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableTRACK.TRACKS_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TRACKS_Id\' in table \'TRACK\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTRACK.TRACKS_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRow TRACKSRow
            {
                get
                {
                    return ((TRACKSRow)(this.GetParentRow(this.Table.ParentRelations["TRACKS_TRACK"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TRACKS_TRACK"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACKTITLENull()
            {
                return this.IsNull(this.tableTRACK.TRACKTITLEColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACKTITLENull()
            {
                this[this.tableTRACK.TRACKTITLEColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTARTTIMENull()
            {
                return this.IsNull(this.tableTRACK.STARTTIMEColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTARTTIMENull()
            {
                this[this.tableTRACK.STARTTIMEColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLABELNull()
            {
                return this.IsNull(this.tableTRACK.LABELColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLABELNull()
            {
                this[this.tableTRACK.LABELColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACKURLNull()
            {
                return this.IsNull(this.tableTRACK.TRACKURLColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACKURLNull()
            {
                this[this.tableTRACK.TRACKURLColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBOARDCOUNTNull()
            {
                return this.IsNull(this.tableTRACK.BOARDCOUNTColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBOARDCOUNTNull()
            {
                this[this.tableTRACK.BOARDCOUNTColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACKS_IdNull()
            {
                return this.IsNull(this.tableTRACK.TRACKS_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACKS_IdNull()
            {
                this[this.tableTRACK.TRACKS_IdColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLRow[] GetEXTRAURLRows()
            {
                return ((EXTRAURLRow[])(base.GetChildRows(this.Table.ChildRelations["TRACK_EXTRAURL"])));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1Row[] GetBUYURL1Rows()
            {
                return ((BUYURL1Row[])(base.GetChildRows(this.Table.ChildRelations["TRACK_BUYURL1"])));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2Row[] GetBUYURL2Rows()
            {
                return ((BUYURL2Row[])(base.GetChildRows(this.Table.ChildRelations["TRACK_BUYURL2"])));
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EXTRAURLRow : System.Data.DataRow
        {

            private EXTRAURLDataTable tableEXTRAURL;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EXTRAURLRow(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableEXTRAURL = ((EXTRAURLDataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLE
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableEXTRAURL.TITLEColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TITLE\' in table \'EXTRAURL\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEXTRAURL.TITLEColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTRAURL_Text
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableEXTRAURL.EXTRAURL_TextColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'EXTRAURL_Text\' in table \'EXTRAURL\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEXTRAURL.EXTRAURL_TextColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRACK_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableEXTRAURL.TRACK_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TRACK_Id\' in table \'EXTRAURL\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEXTRAURL.TRACK_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow TRACKRow
            {
                get
                {
                    return ((TRACKRow)(this.GetParentRow(this.Table.ParentRelations["TRACK_EXTRAURL"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TRACK_EXTRAURL"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTITLENull()
            {
                return this.IsNull(this.tableEXTRAURL.TITLEColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTITLENull()
            {
                this[this.tableEXTRAURL.TITLEColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTRAURL_TextNull()
            {
                return this.IsNull(this.tableEXTRAURL.EXTRAURL_TextColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTRAURL_TextNull()
            {
                this[this.tableEXTRAURL.EXTRAURL_TextColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACK_IdNull()
            {
                return this.IsNull(this.tableEXTRAURL.TRACK_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACK_IdNull()
            {
                this[this.tableEXTRAURL.TRACK_IdColumn] = System.Convert.DBNull;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BUYURL1Row : System.Data.DataRow
        {

            private BUYURL1DataTable tableBUYURL1;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BUYURL1Row(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableBUYURL1 = ((BUYURL1DataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FROM
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBUYURL1.FROMColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'FROM\' in table \'BUYURL1\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBUYURL1.FROMColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRACK_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBUYURL1.TRACK_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TRACK_Id\' in table \'BUYURL1\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBUYURL1.TRACK_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow TRACKRow
            {
                get
                {
                    return ((TRACKRow)(this.GetParentRow(this.Table.ParentRelations["TRACK_BUYURL1"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TRACK_BUYURL1"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFROMNull()
            {
                return this.IsNull(this.tableBUYURL1.FROMColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFROMNull()
            {
                this[this.tableBUYURL1.FROMColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACK_IdNull()
            {
                return this.IsNull(this.tableBUYURL1.TRACK_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACK_IdNull()
            {
                this[this.tableBUYURL1.TRACK_IdColumn] = System.Convert.DBNull;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BUYURL2Row : System.Data.DataRow
        {

            private BUYURL2DataTable tableBUYURL2;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BUYURL2Row(System.Data.DataRowBuilder rb)
                :
                    base(rb)
            {
                this.tableBUYURL2 = ((BUYURL2DataTable)(this.Table));
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FROM
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBUYURL2.FROMColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'FROM\' in table \'BUYURL2\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBUYURL2.FROMColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUYURL2_Text
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBUYURL2.BUYURL2_TextColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'BUYURL2_Text\' in table \'BUYURL2\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBUYURL2.BUYURL2_TextColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRACK_Id
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBUYURL2.TRACK_IdColumn]));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("The value for column \'TRACK_Id\' in table \'BUYURL2\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBUYURL2.TRACK_IdColumn] = value;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow TRACKRow
            {
                get
                {
                    return ((TRACKRow)(this.GetParentRow(this.Table.ParentRelations["TRACK_BUYURL2"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TRACK_BUYURL2"]);
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFROMNull()
            {
                return this.IsNull(this.tableBUYURL2.FROMColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFROMNull()
            {
                this[this.tableBUYURL2.FROMColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUYURL2_TextNull()
            {
                return this.IsNull(this.tableBUYURL2.BUYURL2_TextColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUYURL2_TextNull()
            {
                this[this.tableBUYURL2.BUYURL2_TextColumn] = System.Convert.DBNull;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACK_IdNull()
            {
                return this.IsNull(this.tableBUYURL2.TRACK_IdColumn);
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACK_IdNull()
            {
                this[this.tableBUYURL2.TRACK_IdColumn] = System.Convert.DBNull;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PLAYLISTSRowChangeEvent : System.EventArgs
        {

            private PLAYLISTSRow eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSRowChangeEvent(PLAYLISTSRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PLAYLISTSRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CHANNELSRowChangeEvent : System.EventArgs
        {

            private CHANNELSRow eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRowChangeEvent(CHANNELSRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELSRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CHANNELRowChangeEvent : System.EventArgs
        {

            private CHANNELRow eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRowChangeEvent(CHANNELRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHANNELRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TRACKSRowChangeEvent : System.EventArgs
        {

            private TRACKSRow eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRowChangeEvent(TRACKSRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKSRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TRACKRowChangeEvent : System.EventArgs
        {

            private TRACKRow eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRowChangeEvent(TRACKRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRACKRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EXTRAURLRowChangeEvent : System.EventArgs
        {

            private EXTRAURLRow eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLRowChangeEvent(EXTRAURLRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXTRAURLRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BUYURL1RowChangeEvent : System.EventArgs
        {

            private BUYURL1Row eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1RowChangeEvent(BUYURL1Row row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL1Row Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BUYURL2RowChangeEvent : System.EventArgs
        {

            private BUYURL2Row eventRow;

            private System.Data.DataRowAction eventAction;

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2RowChangeEvent(BUYURL2Row row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BUYURL2Row Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
